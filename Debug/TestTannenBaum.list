
TestTannenBaum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029e8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002aa8  08002aa8  00003aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b3c  08002b3c  0000501c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b3c  08002b3c  0000501c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b3c  08002b3c  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b3c  08002b3c  00003b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b40  08002b40  00003b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000101c  20000000  08002b44  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000101c  08003b60  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010d8  08003b60  000050d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b07  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001689  00000000  00000000  0000db4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0000f1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000762  00000000  00000000  0000fb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012100  00000000  00000000  000102ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a813  00000000  00000000  000223ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074cc6  00000000  00000000  0002cbcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a1893  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002234  00000000  00000000  000a18d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000a3b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000101c 	.word	0x2000101c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a90 	.word	0x08002a90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20001020 	.word	0x20001020
 8000104:	08002a90 	.word	0x08002a90

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fc09 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f861 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f9fd 	bl	800062c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000232:	f000 f8a1 	bl	8000378 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000236:	f000 f9a3 	bl	8000580 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800023a:	4b29      	ldr	r3, [pc, #164]	@ (80002e0 <main+0xc0>)
 800023c:	2100      	movs	r1, #0
 800023e:	0018      	movs	r0, r3
 8000240:	f001 fb30 	bl	80018a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000244:	4b26      	ldr	r3, [pc, #152]	@ (80002e0 <main+0xc0>)
 8000246:	2104      	movs	r1, #4
 8000248:	0018      	movs	r0, r3
 800024a:	f001 fb2b 	bl	80018a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800024e:	4b24      	ldr	r3, [pc, #144]	@ (80002e0 <main+0xc0>)
 8000250:	210c      	movs	r1, #12
 8000252:	0018      	movs	r0, r3
 8000254:	f001 fb26 	bl	80018a4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000258:	4b22      	ldr	r3, [pc, #136]	@ (80002e4 <main+0xc4>)
 800025a:	0018      	movs	r0, r3
 800025c:	f001 fa74 	bl	8001748 <HAL_TIM_Base_Start_IT>

  uint16_t sftwrPWMtime = 0;
 8000260:	1dbb      	adds	r3, r7, #6
 8000262:	2200      	movs	r2, #0
 8000264:	801a      	strh	r2, [r3, #0]

//  uint32_t dummyCount = 0; // DEBUG
//  sftwrBrightness = 63; // DEBUG

  uint8_t sftwrLEDstate = 0;
 8000266:	1d7b      	adds	r3, r7, #5
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800026c:	2380      	movs	r3, #128	@ 0x80
 800026e:	0159      	lsls	r1, r3, #5
 8000270:	23a0      	movs	r3, #160	@ 0xa0
 8000272:	05db      	lsls	r3, r3, #23
 8000274:	2200      	movs	r2, #0
 8000276:	0018      	movs	r0, r3
 8000278:	f000 feb2 	bl	8000fe0 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Software PWM:
	  if ((sftwrLEDstate == 0) && (sftwrBrightness < sftwrPWMtime))
 800027c:	1d7b      	adds	r3, r7, #5
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d110      	bne.n	80002a6 <main+0x86>
 8000284:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <main+0xc8>)
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	1dba      	adds	r2, r7, #6
 800028a:	8812      	ldrh	r2, [r2, #0]
 800028c:	429a      	cmp	r2, r3
 800028e:	d90a      	bls.n	80002a6 <main+0x86>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000290:	2380      	movs	r3, #128	@ 0x80
 8000292:	0159      	lsls	r1, r3, #5
 8000294:	23a0      	movs	r3, #160	@ 0xa0
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	2201      	movs	r2, #1
 800029a:	0018      	movs	r0, r3
 800029c:	f000 fea0 	bl	8000fe0 <HAL_GPIO_WritePin>
		  sftwrLEDstate = 1;
 80002a0:	1d7b      	adds	r3, r7, #5
 80002a2:	2201      	movs	r2, #1
 80002a4:	701a      	strb	r2, [r3, #0]
	  }
	  sftwrPWMtime++;
 80002a6:	1dbb      	adds	r3, r7, #6
 80002a8:	881a      	ldrh	r2, [r3, #0]
 80002aa:	1dbb      	adds	r3, r7, #6
 80002ac:	3201      	adds	r2, #1
 80002ae:	801a      	strh	r2, [r3, #0]
	  if (sftwrPWMtime >= 1023)
 80002b0:	1dbb      	adds	r3, r7, #6
 80002b2:	881b      	ldrh	r3, [r3, #0]
 80002b4:	4a0d      	ldr	r2, [pc, #52]	@ (80002ec <main+0xcc>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d9e0      	bls.n	800027c <main+0x5c>
	  {
		  sftwrPWMtime = 0;
 80002ba:	1dbb      	adds	r3, r7, #6
 80002bc:	2200      	movs	r2, #0
 80002be:	801a      	strh	r2, [r3, #0]
		  if (sftwrBrightness != 0)
 80002c0:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <main+0xc8>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d007      	beq.n	80002d8 <main+0xb8>
		  {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80002c8:	2380      	movs	r3, #128	@ 0x80
 80002ca:	0159      	lsls	r1, r3, #5
 80002cc:	23a0      	movs	r3, #160	@ 0xa0
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	2200      	movs	r2, #0
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 fe84 	bl	8000fe0 <HAL_GPIO_WritePin>
		  }
		  sftwrLEDstate = 0;
 80002d8:	1d7b      	adds	r3, r7, #5
 80002da:	2200      	movs	r2, #0
 80002dc:	701a      	strb	r2, [r3, #0]
	  if ((sftwrLEDstate == 0) && (sftwrBrightness < sftwrPWMtime))
 80002de:	e7cd      	b.n	800027c <main+0x5c>
 80002e0:	20001038 	.word	0x20001038
 80002e4:	20001084 	.word	0x20001084
 80002e8:	200010d0 	.word	0x200010d0
 80002ec:	000003fe 	.word	0x000003fe

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b08d      	sub	sp, #52	@ 0x34
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	2414      	movs	r4, #20
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	0018      	movs	r0, r3
 80002fc:	231c      	movs	r3, #28
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f002 fb99 	bl	8002a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000306:	003b      	movs	r3, r7
 8000308:	0018      	movs	r0, r3
 800030a:	2314      	movs	r3, #20
 800030c:	001a      	movs	r2, r3
 800030e:	2100      	movs	r1, #0
 8000310:	f002 fb92 	bl	8002a38 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2202      	movs	r2, #2
 8000318:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2280      	movs	r2, #128	@ 0x80
 800031e:	0052      	lsls	r2, r2, #1
 8000320:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV16;
 8000322:	193b      	adds	r3, r7, r4
 8000324:	2280      	movs	r2, #128	@ 0x80
 8000326:	0192      	lsls	r2, r2, #6
 8000328:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032a:	193b      	adds	r3, r7, r4
 800032c:	2240      	movs	r2, #64	@ 0x40
 800032e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	193b      	adds	r3, r7, r4
 8000332:	0018      	movs	r0, r3
 8000334:	f000 fe72 	bl	800101c <HAL_RCC_OscConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800033c:	f000 f9bc 	bl	80006b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	003b      	movs	r3, r7
 8000342:	2207      	movs	r2, #7
 8000344:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000346:	003b      	movs	r3, r7
 8000348:	2200      	movs	r2, #0
 800034a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800034c:	003b      	movs	r3, r7
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000352:	003b      	movs	r3, r7
 8000354:	2200      	movs	r2, #0
 8000356:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000358:	003b      	movs	r3, r7
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800035e:	003b      	movs	r3, r7
 8000360:	2100      	movs	r1, #0
 8000362:	0018      	movs	r0, r3
 8000364:	f001 f83e 	bl	80013e4 <HAL_RCC_ClockConfig>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800036c:	f000 f9a4 	bl	80006b8 <Error_Handler>
  }
}
 8000370:	46c0      	nop			@ (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	b00d      	add	sp, #52	@ 0x34
 8000376:	bd90      	pop	{r4, r7, pc}

08000378 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b09c      	sub	sp, #112	@ 0x70
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037e:	2360      	movs	r3, #96	@ 0x60
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	0018      	movs	r0, r3
 8000384:	2310      	movs	r3, #16
 8000386:	001a      	movs	r2, r3
 8000388:	2100      	movs	r1, #0
 800038a:	f002 fb55 	bl	8002a38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038e:	2354      	movs	r3, #84	@ 0x54
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	0018      	movs	r0, r3
 8000394:	230c      	movs	r3, #12
 8000396:	001a      	movs	r2, r3
 8000398:	2100      	movs	r1, #0
 800039a:	f002 fb4d 	bl	8002a38 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800039e:	2338      	movs	r3, #56	@ 0x38
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	0018      	movs	r0, r3
 80003a4:	231c      	movs	r3, #28
 80003a6:	001a      	movs	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f002 fb45 	bl	8002a38 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	0018      	movs	r0, r3
 80003b2:	2334      	movs	r3, #52	@ 0x34
 80003b4:	001a      	movs	r2, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	f002 fb3e 	bl	8002a38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003bc:	4b6b      	ldr	r3, [pc, #428]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80003be:	4a6c      	ldr	r2, [pc, #432]	@ (8000570 <MX_TIM1_Init+0x1f8>)
 80003c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 80003c2:	4b6a      	ldr	r3, [pc, #424]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80003c4:	2202      	movs	r2, #2
 80003c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c8:	4b68      	ldr	r3, [pc, #416]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80003ce:	4b67      	ldr	r3, [pc, #412]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80003d0:	4a68      	ldr	r2, [pc, #416]	@ (8000574 <MX_TIM1_Init+0x1fc>)
 80003d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d4:	4b65      	ldr	r3, [pc, #404]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003da:	4b64      	ldr	r3, [pc, #400]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e0:	4b62      	ldr	r3, [pc, #392]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e6:	4b61      	ldr	r3, [pc, #388]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 f955 	bl	8001698 <HAL_TIM_Base_Init>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80003f2:	f000 f961 	bl	80006b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f6:	2160      	movs	r1, #96	@ 0x60
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2280      	movs	r2, #128	@ 0x80
 80003fc:	0152      	lsls	r2, r2, #5
 80003fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000400:	187a      	adds	r2, r7, r1
 8000402:	4b5a      	ldr	r3, [pc, #360]	@ (800056c <MX_TIM1_Init+0x1f4>)
 8000404:	0011      	movs	r1, r2
 8000406:	0018      	movs	r0, r3
 8000408:	f001 fd2c 	bl	8001e64 <HAL_TIM_ConfigClockSource>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000410:	f000 f952 	bl	80006b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000414:	4b55      	ldr	r3, [pc, #340]	@ (800056c <MX_TIM1_Init+0x1f4>)
 8000416:	0018      	movs	r0, r3
 8000418:	f001 f9e4 	bl	80017e4 <HAL_TIM_PWM_Init>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000420:	f000 f94a 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000424:	2154      	movs	r1, #84	@ 0x54
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2200      	movs	r2, #0
 8000430:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000432:	187b      	adds	r3, r7, r1
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000438:	187a      	adds	r2, r7, r1
 800043a:	4b4c      	ldr	r3, [pc, #304]	@ (800056c <MX_TIM1_Init+0x1f4>)
 800043c:	0011      	movs	r1, r2
 800043e:	0018      	movs	r0, r3
 8000440:	f002 f9e4 	bl	800280c <HAL_TIMEx_MasterConfigSynchronization>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d001      	beq.n	800044c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000448:	f000 f936 	bl	80006b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800044c:	2138      	movs	r1, #56	@ 0x38
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2260      	movs	r2, #96	@ 0x60
 8000452:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	22ff      	movs	r2, #255	@ 0xff
 8000458:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2202      	movs	r2, #2
 800045e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2200      	movs	r2, #0
 8000464:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2280      	movs	r2, #128	@ 0x80
 8000470:	0052      	lsls	r2, r2, #1
 8000472:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2200      	movs	r2, #0
 8000478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800047a:	1879      	adds	r1, r7, r1
 800047c:	4b3b      	ldr	r3, [pc, #236]	@ (800056c <MX_TIM1_Init+0x1f4>)
 800047e:	2200      	movs	r2, #0
 8000480:	0018      	movs	r0, r3
 8000482:	f001 fbef 	bl	8001c64 <HAL_TIM_PWM_ConfigChannel>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800048a:	f000 f915 	bl	80006b8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 800048e:	4b37      	ldr	r3, [pc, #220]	@ (800056c <MX_TIM1_Init+0x1f4>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	699a      	ldr	r2, [r3, #24]
 8000494:	4b35      	ldr	r3, [pc, #212]	@ (800056c <MX_TIM1_Init+0x1f4>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2108      	movs	r1, #8
 800049a:	438a      	bics	r2, r1
 800049c:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 127;
 800049e:	2138      	movs	r1, #56	@ 0x38
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	227f      	movs	r2, #127	@ 0x7f
 80004a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004a6:	1879      	adds	r1, r7, r1
 80004a8:	4b30      	ldr	r3, [pc, #192]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80004aa:	2204      	movs	r2, #4
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 fbd9 	bl	8001c64 <HAL_TIM_PWM_ConfigChannel>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80004b6:	f000 f8ff 	bl	80006b8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80004ba:	4b2c      	ldr	r3, [pc, #176]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	699a      	ldr	r2, [r3, #24]
 80004c0:	4b2a      	ldr	r3, [pc, #168]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	492c      	ldr	r1, [pc, #176]	@ (8000578 <MX_TIM1_Init+0x200>)
 80004c6:	400a      	ands	r2, r1
 80004c8:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 511;
 80004ca:	2138      	movs	r1, #56	@ 0x38
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	4a2b      	ldr	r2, [pc, #172]	@ (800057c <MX_TIM1_Init+0x204>)
 80004d0:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	4b25      	ldr	r3, [pc, #148]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fbc3 	bl	8001c64 <HAL_TIM_PWM_ConfigChannel>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 80004e2:	f000 f8e9 	bl	80006b8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80004e6:	4b21      	ldr	r3, [pc, #132]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	69da      	ldr	r2, [r3, #28]
 80004ec:	4b1f      	ldr	r3, [pc, #124]	@ (800056c <MX_TIM1_Init+0x1f4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4921      	ldr	r1, [pc, #132]	@ (8000578 <MX_TIM1_Init+0x200>)
 80004f2:	400a      	ands	r2, r1
 80004f4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	0192      	lsls	r2, r2, #6
 800051a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2280      	movs	r2, #128	@ 0x80
 8000532:	0492      	lsls	r2, r2, #18
 8000534:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000548:	1d3a      	adds	r2, r7, #4
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <MX_TIM1_Init+0x1f4>)
 800054c:	0011      	movs	r1, r2
 800054e:	0018      	movs	r0, r3
 8000550:	f002 f9be 	bl	80028d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <MX_TIM1_Init+0x1e4>
  {
    Error_Handler();
 8000558:	f000 f8ae 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800055c:	4b03      	ldr	r3, [pc, #12]	@ (800056c <MX_TIM1_Init+0x1f4>)
 800055e:	0018      	movs	r0, r3
 8000560:	f000 f910 	bl	8000784 <HAL_TIM_MspPostInit>

}
 8000564:	46c0      	nop			@ (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b01c      	add	sp, #112	@ 0x70
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20001038 	.word	0x20001038
 8000570:	40012c00 	.word	0x40012c00
 8000574:	000003ff 	.word	0x000003ff
 8000578:	fffff7ff 	.word	0xfffff7ff
 800057c:	000001ff 	.word	0x000001ff

08000580 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000586:	2310      	movs	r3, #16
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	0018      	movs	r0, r3
 800058c:	2310      	movs	r3, #16
 800058e:	001a      	movs	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	f002 fa51 	bl	8002a38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	0018      	movs	r0, r3
 800059a:	230c      	movs	r3, #12
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f002 fa4a 	bl	8002a38 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000620 <MX_TIM3_Init+0xa0>)
 80005a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000624 <MX_TIM3_Init+0xa4>)
 80005a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 80005aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000620 <MX_TIM3_Init+0xa0>)
 80005ac:	2205      	movs	r2, #5
 80005ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <MX_TIM3_Init+0xa0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80005b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <MX_TIM3_Init+0xa0>)
 80005b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000628 <MX_TIM3_Init+0xa8>)
 80005ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005bc:	4b18      	ldr	r3, [pc, #96]	@ (8000620 <MX_TIM3_Init+0xa0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c2:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <MX_TIM3_Init+0xa0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005c8:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <MX_TIM3_Init+0xa0>)
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 f864 	bl	8001698 <HAL_TIM_Base_Init>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80005d4:	f000 f870 	bl	80006b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d8:	2110      	movs	r1, #16
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2280      	movs	r2, #128	@ 0x80
 80005de:	0152      	lsls	r2, r2, #5
 80005e0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005e2:	187a      	adds	r2, r7, r1
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <MX_TIM3_Init+0xa0>)
 80005e6:	0011      	movs	r1, r2
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 fc3b 	bl	8001e64 <HAL_TIM_ConfigClockSource>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80005f2:	f000 f861 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000602:	1d3a      	adds	r2, r7, #4
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <MX_TIM3_Init+0xa0>)
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f002 f8ff 	bl	800280c <HAL_TIMEx_MasterConfigSynchronization>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000612:	f000 f851 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b008      	add	sp, #32
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	20001084 	.word	0x20001084
 8000624:	40000400 	.word	0x40000400
 8000628:	0000270f 	.word	0x0000270f

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b089      	sub	sp, #36	@ 0x24
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	240c      	movs	r4, #12
 8000634:	193b      	adds	r3, r7, r4
 8000636:	0018      	movs	r0, r3
 8000638:	2314      	movs	r3, #20
 800063a:	001a      	movs	r2, r3
 800063c:	2100      	movs	r1, #0
 800063e:	f002 f9fb 	bl	8002a38 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <MX_GPIO_Init+0x88>)
 8000644:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000646:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <MX_GPIO_Init+0x88>)
 8000648:	2102      	movs	r1, #2
 800064a:	430a      	orrs	r2, r1
 800064c:	635a      	str	r2, [r3, #52]	@ 0x34
 800064e:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <MX_GPIO_Init+0x88>)
 8000650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000652:	2202      	movs	r2, #2
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <MX_GPIO_Init+0x88>)
 800065c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800065e:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <MX_GPIO_Init+0x88>)
 8000660:	2101      	movs	r1, #1
 8000662:	430a      	orrs	r2, r1
 8000664:	635a      	str	r2, [r3, #52]	@ 0x34
 8000666:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <MX_GPIO_Init+0x88>)
 8000668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800066a:	2201      	movs	r2, #1
 800066c:	4013      	ands	r3, r2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000672:	2380      	movs	r3, #128	@ 0x80
 8000674:	0159      	lsls	r1, r3, #5
 8000676:	23a0      	movs	r3, #160	@ 0xa0
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	2201      	movs	r2, #1
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fcaf 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2280      	movs	r2, #128	@ 0x80
 8000686:	0152      	lsls	r2, r2, #5
 8000688:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2211      	movs	r2, #17
 800068e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	193a      	adds	r2, r7, r4
 800069e:	23a0      	movs	r3, #160	@ 0xa0
 80006a0:	05db      	lsls	r3, r3, #23
 80006a2:	0011      	movs	r1, r2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fb31 	bl	8000d0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b009      	add	sp, #36	@ 0x24
 80006b0:	bd90      	pop	{r4, r7, pc}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	40021000 	.word	0x40021000

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	46c0      	nop			@ (mov r8, r8)
 80006c2:	e7fd      	b.n	80006c0 <Error_Handler+0x8>

080006c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <HAL_MspInit+0x44>)
 80006cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <HAL_MspInit+0x44>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	430a      	orrs	r2, r1
 80006d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <HAL_MspInit+0x44>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006da:	2201      	movs	r2, #1
 80006dc:	4013      	ands	r3, r2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <HAL_MspInit+0x44>)
 80006e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <HAL_MspInit+0x44>)
 80006e8:	2180      	movs	r1, #128	@ 0x80
 80006ea:	0549      	lsls	r1, r1, #21
 80006ec:	430a      	orrs	r2, r1
 80006ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_MspInit+0x44>)
 80006f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006f4:	2380      	movs	r3, #128	@ 0x80
 80006f6:	055b      	lsls	r3, r3, #21
 80006f8:	4013      	ands	r3, r2
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b002      	add	sp, #8
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <HAL_TIM_Base_MspInit+0x6c>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d10e      	bne.n	800073c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800071e:	4b17      	ldr	r3, [pc, #92]	@ (800077c <HAL_TIM_Base_MspInit+0x70>)
 8000720:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000722:	4b16      	ldr	r3, [pc, #88]	@ (800077c <HAL_TIM_Base_MspInit+0x70>)
 8000724:	2180      	movs	r1, #128	@ 0x80
 8000726:	0109      	lsls	r1, r1, #4
 8000728:	430a      	orrs	r2, r1
 800072a:	641a      	str	r2, [r3, #64]	@ 0x40
 800072c:	4b13      	ldr	r3, [pc, #76]	@ (800077c <HAL_TIM_Base_MspInit+0x70>)
 800072e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000730:	2380      	movs	r3, #128	@ 0x80
 8000732:	011b      	lsls	r3, r3, #4
 8000734:	4013      	ands	r3, r2
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800073a:	e018      	b.n	800076e <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM3)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0f      	ldr	r2, [pc, #60]	@ (8000780 <HAL_TIM_Base_MspInit+0x74>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d113      	bne.n	800076e <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000746:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <HAL_TIM_Base_MspInit+0x70>)
 8000748:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <HAL_TIM_Base_MspInit+0x70>)
 800074c:	2102      	movs	r1, #2
 800074e:	430a      	orrs	r2, r1
 8000750:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <HAL_TIM_Base_MspInit+0x70>)
 8000754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000756:	2202      	movs	r2, #2
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	2010      	movs	r0, #16
 8000764:	f000 faa0 	bl	8000ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000768:	2010      	movs	r0, #16
 800076a:	f000 fab2 	bl	8000cd2 <HAL_NVIC_EnableIRQ>
}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b004      	add	sp, #16
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	40012c00 	.word	0x40012c00
 800077c:	40021000 	.word	0x40021000
 8000780:	40000400 	.word	0x40000400

08000784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b08b      	sub	sp, #44	@ 0x2c
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	2414      	movs	r4, #20
 800078e:	193b      	adds	r3, r7, r4
 8000790:	0018      	movs	r0, r3
 8000792:	2314      	movs	r3, #20
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f002 f94e 	bl	8002a38 <memset>
  if(htim->Instance==TIM1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a32      	ldr	r2, [pc, #200]	@ (800086c <HAL_TIM_MspPostInit+0xe8>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d15e      	bne.n	8000864 <HAL_TIM_MspPostInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b32      	ldr	r3, [pc, #200]	@ (8000870 <HAL_TIM_MspPostInit+0xec>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007aa:	4b31      	ldr	r3, [pc, #196]	@ (8000870 <HAL_TIM_MspPostInit+0xec>)
 80007ac:	2102      	movs	r1, #2
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000870 <HAL_TIM_MspPostInit+0xec>)
 80007b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007b6:	2202      	movs	r2, #2
 80007b8:	4013      	ands	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b2c      	ldr	r3, [pc, #176]	@ (8000870 <HAL_TIM_MspPostInit+0xec>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <HAL_TIM_MspPostInit+0xec>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ca:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <HAL_TIM_MspPostInit+0xec>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ce:	2201      	movs	r2, #1
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB7     ------> TIM1_CH4
    PA1     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2202      	movs	r2, #2
 80007e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2201      	movs	r2, #1
 80007f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000874 <HAL_TIM_MspPostInit+0xf0>)
 80007f8:	0019      	movs	r1, r3
 80007fa:	0010      	movs	r0, r2
 80007fc:	f000 fa86 	bl	8000d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2202      	movs	r2, #2
 8000804:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	193b      	adds	r3, r7, r4
 8000808:	2202      	movs	r2, #2
 800080a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2205      	movs	r2, #5
 800081c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	193a      	adds	r2, r7, r4
 8000820:	23a0      	movs	r3, #160	@ 0xa0
 8000822:	05db      	lsls	r3, r3, #23
 8000824:	0011      	movs	r1, r2
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fa70 	bl	8000d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800082c:	0021      	movs	r1, r4
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2280      	movs	r2, #128	@ 0x80
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2202      	movs	r2, #2
 800083a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2202      	movs	r2, #2
 800084c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	187a      	adds	r2, r7, r1
 8000850:	23a0      	movs	r3, #160	@ 0xa0
 8000852:	05db      	lsls	r3, r3, #23
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fa58 	bl	8000d0c <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN1_PB7|HAL_BIND_SO8_PIN4_PA1|HAL_BIND_SO8_PIN5_PA8);
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_TIM_MspPostInit+0xf4>)
 800085e:	0018      	movs	r0, r3
 8000860:	f000 f96a 	bl	8000b38 <HAL_SYSCFG_SetPinBinding>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b00b      	add	sp, #44	@ 0x2c
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	40012c00 	.word	0x40012c00
 8000870:	40021000 	.word	0x40021000
 8000874:	50000400 	.word	0x50000400
 8000878:	003f0008 	.word	0x003f0008

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	e7fd      	b.n	8000880 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	e7fd      	b.n	8000888 <HardFault_Handler+0x4>

0800088c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 f92c 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	// IMPORTANT!!! Use 'HAL_TIM_Base_Start_IT(&htim3);' in 'main.c' !!!
	TIM1->CCR1 = outputA.brightness[outputA.indx]; // set brightness for LEDs 1 and 2
 80008b4:	4b33      	ldr	r3, [pc, #204]	@ (8000984 <TIM3_IRQHandler+0xd4>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	4a32      	ldr	r2, [pc, #200]	@ (8000984 <TIM3_IRQHandler+0xd4>)
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	18d3      	adds	r3, r2, r3
 80008be:	3304      	adds	r3, #4
 80008c0:	881a      	ldrh	r2, [r3, #0]
 80008c2:	4b31      	ldr	r3, [pc, #196]	@ (8000988 <TIM3_IRQHandler+0xd8>)
 80008c4:	635a      	str	r2, [r3, #52]	@ 0x34
	outputA.indx++; // increase for next value in LED brightness sequence
 80008c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000984 <TIM3_IRQHandler+0xd4>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000984 <TIM3_IRQHandler+0xd4>)
 80008d0:	801a      	strh	r2, [r3, #0]
	if (outputA.indx >= outputA.length) // if end of sequence of LED brightnesses is reached, reset index
 80008d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000984 <TIM3_IRQHandler+0xd4>)
 80008d4:	881a      	ldrh	r2, [r3, #0]
 80008d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000984 <TIM3_IRQHandler+0xd4>)
 80008d8:	885b      	ldrh	r3, [r3, #2]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d302      	bcc.n	80008e4 <TIM3_IRQHandler+0x34>
	{
		outputA.indx = 0;
 80008de:	4b29      	ldr	r3, [pc, #164]	@ (8000984 <TIM3_IRQHandler+0xd4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	801a      	strh	r2, [r3, #0]
	}
	//************************************************************************
	sftwrBrightness = outputB.brightness[outputB.indx]; // set brightness for LEDs 3 and 4
 80008e4:	4b29      	ldr	r3, [pc, #164]	@ (800098c <TIM3_IRQHandler+0xdc>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	4a28      	ldr	r2, [pc, #160]	@ (800098c <TIM3_IRQHandler+0xdc>)
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	3304      	adds	r3, #4
 80008f0:	881a      	ldrh	r2, [r3, #0]
 80008f2:	4b27      	ldr	r3, [pc, #156]	@ (8000990 <TIM3_IRQHandler+0xe0>)
 80008f4:	801a      	strh	r2, [r3, #0]
	outputB.indx++; // increase for next value in LED brightness sequence
 80008f6:	4b25      	ldr	r3, [pc, #148]	@ (800098c <TIM3_IRQHandler+0xdc>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <TIM3_IRQHandler+0xdc>)
 8000900:	801a      	strh	r2, [r3, #0]
	if (outputB.indx >= outputB.length) // if end of sequence of LED brightnesses is reached, reset index
 8000902:	4b22      	ldr	r3, [pc, #136]	@ (800098c <TIM3_IRQHandler+0xdc>)
 8000904:	881a      	ldrh	r2, [r3, #0]
 8000906:	4b21      	ldr	r3, [pc, #132]	@ (800098c <TIM3_IRQHandler+0xdc>)
 8000908:	885b      	ldrh	r3, [r3, #2]
 800090a:	429a      	cmp	r2, r3
 800090c:	d302      	bcc.n	8000914 <TIM3_IRQHandler+0x64>
	{
		outputB.indx = 0;
 800090e:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <TIM3_IRQHandler+0xdc>)
 8000910:	2200      	movs	r2, #0
 8000912:	801a      	strh	r2, [r3, #0]
	}
	//************************************************************************
	TIM1->CCR4 = outputC.brightness[outputC.indx]; // set brightness for LEDs 5 and 6
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <TIM3_IRQHandler+0xe4>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	4a1e      	ldr	r2, [pc, #120]	@ (8000994 <TIM3_IRQHandler+0xe4>)
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	18d3      	adds	r3, r2, r3
 800091e:	3304      	adds	r3, #4
 8000920:	881a      	ldrh	r2, [r3, #0]
 8000922:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <TIM3_IRQHandler+0xd8>)
 8000924:	641a      	str	r2, [r3, #64]	@ 0x40
	outputC.indx++; // increase for next value in LED brightness sequence
 8000926:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <TIM3_IRQHandler+0xe4>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <TIM3_IRQHandler+0xe4>)
 8000930:	801a      	strh	r2, [r3, #0]
	if (outputC.indx >= outputC.length) // if end of sequence of LED brightnesses is reached, reset index
 8000932:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <TIM3_IRQHandler+0xe4>)
 8000934:	881a      	ldrh	r2, [r3, #0]
 8000936:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <TIM3_IRQHandler+0xe4>)
 8000938:	885b      	ldrh	r3, [r3, #2]
 800093a:	429a      	cmp	r2, r3
 800093c:	d302      	bcc.n	8000944 <TIM3_IRQHandler+0x94>
	{
		outputC.indx = 0;
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <TIM3_IRQHandler+0xe4>)
 8000940:	2200      	movs	r2, #0
 8000942:	801a      	strh	r2, [r3, #0]
	}
	//************************************************************************
	TIM1->CCR2 = outputD.brightness[outputD.indx]; // set brightness for LEDs 7 and 8
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <TIM3_IRQHandler+0xe8>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	4a13      	ldr	r2, [pc, #76]	@ (8000998 <TIM3_IRQHandler+0xe8>)
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	18d3      	adds	r3, r2, r3
 800094e:	3304      	adds	r3, #4
 8000950:	881a      	ldrh	r2, [r3, #0]
 8000952:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <TIM3_IRQHandler+0xd8>)
 8000954:	639a      	str	r2, [r3, #56]	@ 0x38
	outputD.indx++; // increase for next value in LED brightness sequence
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <TIM3_IRQHandler+0xe8>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <TIM3_IRQHandler+0xe8>)
 8000960:	801a      	strh	r2, [r3, #0]
	if (outputD.indx >= outputD.length) // if end of sequence of LED brightnesses is reached, reset index
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <TIM3_IRQHandler+0xe8>)
 8000964:	881a      	ldrh	r2, [r3, #0]
 8000966:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <TIM3_IRQHandler+0xe8>)
 8000968:	885b      	ldrh	r3, [r3, #2]
 800096a:	429a      	cmp	r2, r3
 800096c:	d302      	bcc.n	8000974 <TIM3_IRQHandler+0xc4>
	{
		outputD.indx = 0;
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <TIM3_IRQHandler+0xe8>)
 8000970:	2200      	movs	r2, #0
 8000972:	801a      	strh	r2, [r3, #0]
	// 	{
	// 		updown = 1;
	// 	}
	// }
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <TIM3_IRQHandler+0xec>)
 8000976:	0018      	movs	r0, r3
 8000978:	f001 f86c 	bl	8001a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800097c:	46c0      	nop			@ (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	20000000 	.word	0x20000000
 8000988:	40012c00 	.word	0x40012c00
 800098c:	20000404 	.word	0x20000404
 8000990:	200010d0 	.word	0x200010d0
 8000994:	20000808 	.word	0x20000808
 8000998:	20000c0c 	.word	0x20000c0c
 800099c:	20001084 	.word	0x20001084

080009a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009a4:	4b03      	ldr	r3, [pc, #12]	@ (80009b4 <SystemInit+0x14>)
 80009a6:	2280      	movs	r2, #128	@ 0x80
 80009a8:	0512      	lsls	r2, r2, #20
 80009aa:	609a      	str	r2, [r3, #8]
#endif
}
 80009ac:	46c0      	nop			@ (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b8:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009bc:	f7ff fff0 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009c2:	e003      	b.n	80009cc <LoopCopyDataInit>

080009c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009c4:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80009c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009ca:	3104      	adds	r1, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009cc:	480a      	ldr	r0, [pc, #40]	@ (80009f8 <LoopForever+0xa>)
  ldr r3, =_edata
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <LoopForever+0xe>)
  adds r2, r0, r1
 80009d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009d4:	d3f6      	bcc.n	80009c4 <CopyDataInit>
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <LoopForever+0x12>)
  b LoopFillZerobss
 80009d8:	e002      	b.n	80009e0 <LoopFillZerobss>

080009da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  str  r3, [r2]
 80009dc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009de:	3204      	adds	r2, #4

080009e0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80009e0:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <LoopForever+0x16>)
  cmp r2, r3
 80009e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009e4:	d3f9      	bcc.n	80009da <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80009e6:	f002 f82f 	bl	8002a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ea:	f7ff fc19 	bl	8000220 <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   r0, =_estack
 80009f0:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80009f4:	08002b44 	.word	0x08002b44
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009fc:	2000101c 	.word	0x2000101c
  ldr r2, =_sbss
 8000a00:	2000101c 	.word	0x2000101c
  ldr r3, = _ebss
 8000a04:	200010d8 	.word	0x200010d8

08000a08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_IRQHandler>
	...

08000a0c <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a value of @ref SYSTEM_LL_PINMUX_CFG
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (mux_cfg >> 16U), (mux_cfg & 0x0000FFFFU));
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	0c12      	lsrs	r2, r2, #16
 8000a1c:	43d2      	mvns	r2, r2
 8000a1e:	401a      	ands	r2, r3
 8000a20:	0011      	movs	r1, r2
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	0c1a      	lsrs	r2, r3, #16
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	40010000 	.word	0x40010000

08000a3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f80f 	bl	8000a6c <HAL_InitTick>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d003      	beq.n	8000a5a <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	e001      	b.n	8000a5e <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a5a:	f7ff fe33 	bl	80006c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
}
 8000a62:	0018      	movs	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b002      	add	sp, #8
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a74:	230f      	movs	r3, #15
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000af4 <HAL_InitTick+0x88>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d02b      	beq.n	8000adc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000a84:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <HAL_InitTick+0x8c>)
 8000a86:	681c      	ldr	r4, [r3, #0]
 8000a88:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <HAL_InitTick+0x88>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	23fa      	movs	r3, #250	@ 0xfa
 8000a90:	0098      	lsls	r0, r3, #2
 8000a92:	f7ff fb39 	bl	8000108 <__udivsi3>
 8000a96:	0003      	movs	r3, r0
 8000a98:	0019      	movs	r1, r3
 8000a9a:	0020      	movs	r0, r4
 8000a9c:	f7ff fb34 	bl	8000108 <__udivsi3>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 f925 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d112      	bne.n	8000ad2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d80a      	bhi.n	8000ac8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	2200      	movs	r2, #0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 f8f4 	bl	8000ca8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <HAL_InitTick+0x90>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	e00d      	b.n	8000ae4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ac8:	230f      	movs	r3, #15
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	e008      	b.n	8000ae4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
 8000ada:	e003      	b.n	8000ae4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000adc:	230f      	movs	r3, #15
 8000ade:	18fb      	adds	r3, r7, r3
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	18fb      	adds	r3, r7, r3
 8000ae8:	781b      	ldrb	r3, [r3, #0]
}
 8000aea:	0018      	movs	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b005      	add	sp, #20
 8000af0:	bd90      	pop	{r4, r7, pc}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	20001018 	.word	0x20001018
 8000af8:	20001010 	.word	0x20001010
 8000afc:	20001014 	.word	0x20001014

08000b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <HAL_IncTick+0x1c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	001a      	movs	r2, r3
 8000b0a:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <HAL_IncTick+0x20>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	18d2      	adds	r2, r2, r3
 8000b10:	4b03      	ldr	r3, [pc, #12]	@ (8000b20 <HAL_IncTick+0x20>)
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	20001018 	.word	0x20001018
 8000b20:	200010d4 	.word	0x200010d4

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b02      	ldr	r3, [pc, #8]	@ (8000b34 <HAL_GetTick+0x10>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	200010d4 	.word	0x200010d4

08000b38 <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be a value of @ref HAL_BIND_CFG
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	0018      	movs	r0, r3
 8000b44:	f7ff ff62 	bl	8000a0c <LL_SYSCFG_ConfigPinMux>
}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	0002      	movs	r2, r0
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b62:	d809      	bhi.n	8000b78 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	001a      	movs	r2, r3
 8000b6a:	231f      	movs	r3, #31
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <__NVIC_EnableIRQ+0x30>)
 8000b70:	2101      	movs	r1, #1
 8000b72:	4091      	lsls	r1, r2
 8000b74:	000a      	movs	r2, r1
 8000b76:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b002      	add	sp, #8
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b98:	d828      	bhi.n	8000bec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c58 <__NVIC_SetPriority+0xd4>)
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	33c0      	adds	r3, #192	@ 0xc0
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	589b      	ldr	r3, [r3, r2]
 8000baa:	1dfa      	adds	r2, r7, #7
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	0011      	movs	r1, r2
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	00d2      	lsls	r2, r2, #3
 8000bb6:	21ff      	movs	r1, #255	@ 0xff
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	22ff      	movs	r2, #255	@ 0xff
 8000bc8:	401a      	ands	r2, r3
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	4003      	ands	r3, r0
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	481f      	ldr	r0, [pc, #124]	@ (8000c58 <__NVIC_SetPriority+0xd4>)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	089b      	lsrs	r3, r3, #2
 8000be2:	430a      	orrs	r2, r1
 8000be4:	33c0      	adds	r3, #192	@ 0xc0
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bea:	e031      	b.n	8000c50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bec:	4a1b      	ldr	r2, [pc, #108]	@ (8000c5c <__NVIC_SetPriority+0xd8>)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	0019      	movs	r1, r3
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	400b      	ands	r3, r1
 8000bf8:	3b08      	subs	r3, #8
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	3306      	adds	r3, #6
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	18d3      	adds	r3, r2, r3
 8000c02:	3304      	adds	r3, #4
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	400a      	ands	r2, r1
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	21ff      	movs	r1, #255	@ 0xff
 8000c14:	4091      	lsls	r1, r2
 8000c16:	000a      	movs	r2, r1
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	22ff      	movs	r2, #255	@ 0xff
 8000c24:	401a      	ands	r2, r3
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	4003      	ands	r3, r0
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c34:	4809      	ldr	r0, [pc, #36]	@ (8000c5c <__NVIC_SetPriority+0xd8>)
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	001c      	movs	r4, r3
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	4023      	ands	r3, r4
 8000c40:	3b08      	subs	r3, #8
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	430a      	orrs	r2, r1
 8000c46:	3306      	adds	r3, #6
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	18c3      	adds	r3, r0, r3
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b003      	add	sp, #12
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	2380      	movs	r3, #128	@ 0x80
 8000c6e:	045b      	lsls	r3, r3, #17
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d301      	bcc.n	8000c78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c74:	2301      	movs	r3, #1
 8000c76:	e010      	b.n	8000c9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <SysTick_Config+0x44>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c80:	2301      	movs	r3, #1
 8000c82:	425b      	negs	r3, r3
 8000c84:	2103      	movs	r1, #3
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff ff7c 	bl	8000b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <SysTick_Config+0x44>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <SysTick_Config+0x44>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	1c02      	adds	r2, r0, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff ff5d 	bl	8000b84 <__NVIC_SetPriority>
}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b004      	add	sp, #16
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	0002      	movs	r2, r0
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ff33 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ffaf 	bl	8000c60 <SysTick_Config>
 8000d02:	0003      	movs	r3, r0
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b002      	add	sp, #8
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d1a:	e14d      	b.n	8000fb8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4091      	lsls	r1, r2
 8000d26:	000a      	movs	r2, r1
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <HAL_GPIO_Init+0x28>
 8000d32:	e13e      	b.n	8000fb2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_Init+0x38>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b12      	cmp	r3, #18
 8000d42:	d125      	bne.n	8000d90 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	08da      	lsrs	r2, r3, #3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3208      	adds	r2, #8
 8000d4c:	0092      	lsls	r2, r2, #2
 8000d4e:	58d3      	ldr	r3, [r2, r3]
 8000d50:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	2207      	movs	r2, #7
 8000d56:	4013      	ands	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	0013      	movs	r3, r2
 8000d60:	43da      	mvns	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	4013      	ands	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	220f      	movs	r2, #15
 8000d6e:	401a      	ands	r2, r3
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	2107      	movs	r1, #7
 8000d74:	400b      	ands	r3, r1
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	409a      	lsls	r2, r3
 8000d7a:	0013      	movs	r3, r2
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	08da      	lsrs	r2, r3, #3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3208      	adds	r2, #8
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	6979      	ldr	r1, [r7, #20]
 8000d8e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	0013      	movs	r3, r2
 8000da0:	43da      	mvns	r2, r3
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2203      	movs	r2, #3
 8000dae:	401a      	ands	r2, r3
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	409a      	lsls	r2, r3
 8000db6:	0013      	movs	r3, r2
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d00b      	beq.n	8000de4 <HAL_GPIO_Init+0xd8>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d007      	beq.n	8000de4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd8:	2b11      	cmp	r3, #17
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b12      	cmp	r3, #18
 8000de2:	d130      	bne.n	8000e46 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	409a      	lsls	r2, r3
 8000df2:	0013      	movs	r3, r2
 8000df4:	43da      	mvns	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	409a      	lsls	r2, r3
 8000e06:	0013      	movs	r3, r2
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	43da      	mvns	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	4013      	ands	r3, r2
 8000e28:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	2201      	movs	r2, #1
 8000e32:	401a      	ands	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d017      	beq.n	8000e7e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	4013      	ands	r3, r2
 8000e64:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	2380      	movs	r3, #128	@ 0x80
 8000e84:	055b      	lsls	r3, r3, #21
 8000e86:	4013      	ands	r3, r2
 8000e88:	d100      	bne.n	8000e8c <HAL_GPIO_Init+0x180>
 8000e8a:	e092      	b.n	8000fb2 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000e8c:	4a50      	ldr	r2, [pc, #320]	@ (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	3318      	adds	r3, #24
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	589b      	ldr	r3, [r3, r2]
 8000e98:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	409a      	lsls	r2, r3
 8000ea6:	0013      	movs	r3, r2
 8000ea8:	43da      	mvns	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	4013      	ands	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	23a0      	movs	r3, #160	@ 0xa0
 8000eb4:	05db      	lsls	r3, r3, #23
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d013      	beq.n	8000ee2 <HAL_GPIO_Init+0x1d6>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a45      	ldr	r2, [pc, #276]	@ (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d00d      	beq.n	8000ede <HAL_GPIO_Init+0x1d2>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a44      	ldr	r2, [pc, #272]	@ (8000fd8 <HAL_GPIO_Init+0x2cc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d007      	beq.n	8000eda <HAL_GPIO_Init+0x1ce>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a43      	ldr	r2, [pc, #268]	@ (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d101      	bne.n	8000ed6 <HAL_GPIO_Init+0x1ca>
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x1d8>
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	e004      	b.n	8000ee4 <HAL_GPIO_Init+0x1d8>
 8000eda:	2302      	movs	r3, #2
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_Init+0x1d8>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <HAL_GPIO_Init+0x1d8>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	2103      	movs	r1, #3
 8000ee8:	400a      	ands	r2, r1
 8000eea:	00d2      	lsls	r2, r2, #3
 8000eec:	4093      	lsls	r3, r2
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000ef4:	4936      	ldr	r1, [pc, #216]	@ (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	3318      	adds	r3, #24
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000f02:	4a33      	ldr	r2, [pc, #204]	@ (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000f04:	2380      	movs	r3, #128	@ 0x80
 8000f06:	58d3      	ldr	r3, [r2, r3]
 8000f08:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43da      	mvns	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	2380      	movs	r3, #128	@ 0x80
 8000f1a:	025b      	lsls	r3, r3, #9
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000f28:	4929      	ldr	r1, [pc, #164]	@ (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000f2a:	2280      	movs	r2, #128	@ 0x80
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000f30:	4a27      	ldr	r2, [pc, #156]	@ (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000f32:	2384      	movs	r3, #132	@ 0x84
 8000f34:	58d3      	ldr	r3, [r2, r3]
 8000f36:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	2380      	movs	r3, #128	@ 0x80
 8000f48:	029b      	lsls	r3, r3, #10
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000f56:	491e      	ldr	r1, [pc, #120]	@ (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000f58:	2284      	movs	r2, #132	@ 0x84
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43da      	mvns	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	035b      	lsls	r3, r3, #13
 8000f76:	4013      	ands	r3, r2
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43da      	mvns	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	4013      	ands	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	2380      	movs	r3, #128	@ 0x80
 8000f9e:	039b      	lsls	r3, r3, #14
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	40da      	lsrs	r2, r3
 8000fc0:	1e13      	subs	r3, r2, #0
 8000fc2:	d000      	beq.n	8000fc6 <HAL_GPIO_Init+0x2ba>
 8000fc4:	e6aa      	b.n	8000d1c <HAL_GPIO_Init+0x10>
  }
}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	46c0      	nop			@ (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b006      	add	sp, #24
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40021800 	.word	0x40021800
 8000fd4:	50000400 	.word	0x50000400
 8000fd8:	50000800 	.word	0x50000800
 8000fdc:	50001400 	.word	0x50001400

08000fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	0008      	movs	r0, r1
 8000fea:	0011      	movs	r1, r2
 8000fec:	1cbb      	adds	r3, r7, #2
 8000fee:	1c02      	adds	r2, r0, #0
 8000ff0:	801a      	strh	r2, [r3, #0]
 8000ff2:	1c7b      	adds	r3, r7, #1
 8000ff4:	1c0a      	adds	r2, r1, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff8:	1c7b      	adds	r3, r7, #1
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d004      	beq.n	800100a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001000:	1cbb      	adds	r3, r7, #2
 8001002:	881a      	ldrh	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001008:	e003      	b.n	8001012 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800100a:	1cbb      	adds	r3, r7, #2
 800100c:	881a      	ldrh	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	b002      	add	sp, #8
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e1d0      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2201      	movs	r2, #1
 8001034:	4013      	ands	r3, r2
 8001036:	d100      	bne.n	800103a <HAL_RCC_OscConfig+0x1e>
 8001038:	e069      	b.n	800110e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800103a:	4bc8      	ldr	r3, [pc, #800]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2238      	movs	r2, #56	@ 0x38
 8001040:	4013      	ands	r3, r2
 8001042:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2b08      	cmp	r3, #8
 8001048:	d105      	bne.n	8001056 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d15d      	bne.n	800110e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e1bc      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	025b      	lsls	r3, r3, #9
 800105e:	429a      	cmp	r2, r3
 8001060:	d107      	bne.n	8001072 <HAL_RCC_OscConfig+0x56>
 8001062:	4bbe      	ldr	r3, [pc, #760]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4bbd      	ldr	r3, [pc, #756]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001068:	2180      	movs	r1, #128	@ 0x80
 800106a:	0249      	lsls	r1, r1, #9
 800106c:	430a      	orrs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	e020      	b.n	80010b4 <HAL_RCC_OscConfig+0x98>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	23a0      	movs	r3, #160	@ 0xa0
 8001078:	02db      	lsls	r3, r3, #11
 800107a:	429a      	cmp	r2, r3
 800107c:	d10e      	bne.n	800109c <HAL_RCC_OscConfig+0x80>
 800107e:	4bb7      	ldr	r3, [pc, #732]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4bb6      	ldr	r3, [pc, #728]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001084:	2180      	movs	r1, #128	@ 0x80
 8001086:	02c9      	lsls	r1, r1, #11
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	4bb3      	ldr	r3, [pc, #716]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4bb2      	ldr	r3, [pc, #712]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001092:	2180      	movs	r1, #128	@ 0x80
 8001094:	0249      	lsls	r1, r1, #9
 8001096:	430a      	orrs	r2, r1
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	e00b      	b.n	80010b4 <HAL_RCC_OscConfig+0x98>
 800109c:	4baf      	ldr	r3, [pc, #700]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4bae      	ldr	r3, [pc, #696]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80010a2:	49af      	ldr	r1, [pc, #700]	@ (8001360 <HAL_RCC_OscConfig+0x344>)
 80010a4:	400a      	ands	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	4bac      	ldr	r3, [pc, #688]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4bab      	ldr	r3, [pc, #684]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80010ae:	49ad      	ldr	r1, [pc, #692]	@ (8001364 <HAL_RCC_OscConfig+0x348>)
 80010b0:	400a      	ands	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d014      	beq.n	80010e6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010bc:	f7ff fd32 	bl	8000b24 <HAL_GetTick>
 80010c0:	0003      	movs	r3, r0
 80010c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80010c6:	f7ff fd2d 	bl	8000b24 <HAL_GetTick>
 80010ca:	0002      	movs	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b64      	cmp	r3, #100	@ 0x64
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e17b      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010d8:	4ba0      	ldr	r3, [pc, #640]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2380      	movs	r3, #128	@ 0x80
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	4013      	ands	r3, r2
 80010e2:	d0f0      	beq.n	80010c6 <HAL_RCC_OscConfig+0xaa>
 80010e4:	e013      	b.n	800110e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e6:	f7ff fd1d 	bl	8000b24 <HAL_GetTick>
 80010ea:	0003      	movs	r3, r0
 80010ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fd18 	bl	8000b24 <HAL_GetTick>
 80010f4:	0002      	movs	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	@ 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e166      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001102:	4b96      	ldr	r3, [pc, #600]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2380      	movs	r3, #128	@ 0x80
 8001108:	029b      	lsls	r3, r3, #10
 800110a:	4013      	ands	r3, r2
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2202      	movs	r2, #2
 8001114:	4013      	ands	r3, r2
 8001116:	d100      	bne.n	800111a <HAL_RCC_OscConfig+0xfe>
 8001118:	e086      	b.n	8001228 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800111a:	4b90      	ldr	r3, [pc, #576]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2238      	movs	r2, #56	@ 0x38
 8001120:	4013      	ands	r3, r2
 8001122:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d12f      	bne.n	800118a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e14c      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001136:	4b89      	ldr	r3, [pc, #548]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a8b      	ldr	r2, [pc, #556]	@ (8001368 <HAL_RCC_OscConfig+0x34c>)
 800113c:	4013      	ands	r3, r2
 800113e:	0019      	movs	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	021a      	lsls	r2, r3, #8
 8001146:	4b85      	ldr	r3, [pc, #532]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001148:	430a      	orrs	r2, r1
 800114a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d112      	bne.n	8001178 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001152:	4b82      	ldr	r3, [pc, #520]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a85      	ldr	r2, [pc, #532]	@ (800136c <HAL_RCC_OscConfig+0x350>)
 8001158:	4013      	ands	r3, r2
 800115a:	0019      	movs	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	4b7e      	ldr	r3, [pc, #504]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001162:	430a      	orrs	r2, r1
 8001164:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001166:	4b7d      	ldr	r3, [pc, #500]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	0adb      	lsrs	r3, r3, #11
 800116c:	2207      	movs	r2, #7
 800116e:	4013      	ands	r3, r2
 8001170:	4a7f      	ldr	r2, [pc, #508]	@ (8001370 <HAL_RCC_OscConfig+0x354>)
 8001172:	40da      	lsrs	r2, r3
 8001174:	4b7f      	ldr	r3, [pc, #508]	@ (8001374 <HAL_RCC_OscConfig+0x358>)
 8001176:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001178:	4b7f      	ldr	r3, [pc, #508]	@ (8001378 <HAL_RCC_OscConfig+0x35c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff fc75 	bl	8000a6c <HAL_InitTick>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d050      	beq.n	8001228 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e122      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d030      	beq.n	80011f4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001192:	4b72      	ldr	r3, [pc, #456]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a75      	ldr	r2, [pc, #468]	@ (800136c <HAL_RCC_OscConfig+0x350>)
 8001198:	4013      	ands	r3, r2
 800119a:	0019      	movs	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	4b6e      	ldr	r3, [pc, #440]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80011a6:	4b6d      	ldr	r3, [pc, #436]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b6c      	ldr	r3, [pc, #432]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0049      	lsls	r1, r1, #1
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcb6 	bl	8000b24 <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80011be:	f7ff fcb1 	bl	8000b24 <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e0ff      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011d0:	4b62      	ldr	r3, [pc, #392]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	@ 0x80
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4013      	ands	r3, r2
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011dc:	4b5f      	ldr	r3, [pc, #380]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a61      	ldr	r2, [pc, #388]	@ (8001368 <HAL_RCC_OscConfig+0x34c>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	0019      	movs	r1, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	021a      	lsls	r2, r3, #8
 80011ec:	4b5b      	ldr	r3, [pc, #364]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80011ee:	430a      	orrs	r2, r1
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	e019      	b.n	8001228 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80011f4:	4b59      	ldr	r3, [pc, #356]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b58      	ldr	r3, [pc, #352]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80011fa:	4960      	ldr	r1, [pc, #384]	@ (800137c <HAL_RCC_OscConfig+0x360>)
 80011fc:	400a      	ands	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff fc90 	bl	8000b24 <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800120a:	f7ff fc8b 	bl	8000b24 <HAL_GetTick>
 800120e:	0002      	movs	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e0d9      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800121c:	4b4f      	ldr	r3, [pc, #316]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4013      	ands	r3, r2
 8001226:	d1f0      	bne.n	800120a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2208      	movs	r2, #8
 800122e:	4013      	ands	r3, r2
 8001230:	d042      	beq.n	80012b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001232:	4b4a      	ldr	r3, [pc, #296]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2238      	movs	r2, #56	@ 0x38
 8001238:	4013      	ands	r3, r2
 800123a:	2b18      	cmp	r3, #24
 800123c:	d105      	bne.n	800124a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d138      	bne.n	80012b8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e0c2      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d019      	beq.n	8001286 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001252:	4b42      	ldr	r3, [pc, #264]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001254:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001256:	4b41      	ldr	r3, [pc, #260]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001258:	2101      	movs	r1, #1
 800125a:	430a      	orrs	r2, r1
 800125c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fc61 	bl	8000b24 <HAL_GetTick>
 8001262:	0003      	movs	r3, r0
 8001264:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001268:	f7ff fc5c 	bl	8000b24 <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e0aa      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800127a:	4b38      	ldr	r3, [pc, #224]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127e:	2202      	movs	r2, #2
 8001280:	4013      	ands	r3, r2
 8001282:	d0f1      	beq.n	8001268 <HAL_RCC_OscConfig+0x24c>
 8001284:	e018      	b.n	80012b8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001286:	4b35      	ldr	r3, [pc, #212]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001288:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800128a:	4b34      	ldr	r3, [pc, #208]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 800128c:	2101      	movs	r1, #1
 800128e:	438a      	bics	r2, r1
 8001290:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001292:	f7ff fc47 	bl	8000b24 <HAL_GetTick>
 8001296:	0003      	movs	r3, r0
 8001298:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800129c:	f7ff fc42 	bl	8000b24 <HAL_GetTick>
 80012a0:	0002      	movs	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e090      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80012ae:	4b2b      	ldr	r3, [pc, #172]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80012b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b2:	2202      	movs	r2, #2
 80012b4:	4013      	ands	r3, r2
 80012b6:	d1f1      	bne.n	800129c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2204      	movs	r2, #4
 80012be:	4013      	ands	r3, r2
 80012c0:	d100      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2a8>
 80012c2:	e084      	b.n	80013ce <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c4:	230f      	movs	r3, #15
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80012cc:	4b23      	ldr	r3, [pc, #140]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2238      	movs	r2, #56	@ 0x38
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b20      	cmp	r3, #32
 80012d6:	d106      	bne.n	80012e6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d000      	beq.n	80012e2 <HAL_RCC_OscConfig+0x2c6>
 80012e0:	e075      	b.n	80013ce <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e074      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d106      	bne.n	80012fc <HAL_RCC_OscConfig+0x2e0>
 80012ee:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80012f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012f2:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 80012f4:	2101      	movs	r1, #1
 80012f6:	430a      	orrs	r2, r1
 80012f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012fa:	e01c      	b.n	8001336 <HAL_RCC_OscConfig+0x31a>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b05      	cmp	r3, #5
 8001302:	d10c      	bne.n	800131e <HAL_RCC_OscConfig+0x302>
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001306:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 800130a:	2104      	movs	r1, #4
 800130c:	430a      	orrs	r2, r1
 800130e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001312:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001314:	4b11      	ldr	r3, [pc, #68]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001316:	2101      	movs	r1, #1
 8001318:	430a      	orrs	r2, r1
 800131a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800131c:	e00b      	b.n	8001336 <HAL_RCC_OscConfig+0x31a>
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001320:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001324:	2101      	movs	r1, #1
 8001326:	438a      	bics	r2, r1
 8001328:	65da      	str	r2, [r3, #92]	@ 0x5c
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 800132c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <HAL_RCC_OscConfig+0x340>)
 8001330:	2104      	movs	r1, #4
 8001332:	438a      	bics	r2, r1
 8001334:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d028      	beq.n	8001390 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133e:	f7ff fbf1 	bl	8000b24 <HAL_GetTick>
 8001342:	0003      	movs	r3, r0
 8001344:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001346:	e01d      	b.n	8001384 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001348:	f7ff fbec 	bl	8000b24 <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	4a0b      	ldr	r2, [pc, #44]	@ (8001380 <HAL_RCC_OscConfig+0x364>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d915      	bls.n	8001384 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e039      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
 800135c:	40021000 	.word	0x40021000
 8001360:	fffeffff 	.word	0xfffeffff
 8001364:	fffbffff 	.word	0xfffbffff
 8001368:	ffff80ff 	.word	0xffff80ff
 800136c:	ffffc7ff 	.word	0xffffc7ff
 8001370:	02dc6c00 	.word	0x02dc6c00
 8001374:	20001010 	.word	0x20001010
 8001378:	20001014 	.word	0x20001014
 800137c:	fffffeff 	.word	0xfffffeff
 8001380:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <HAL_RCC_OscConfig+0x3bc>)
 8001386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001388:	2202      	movs	r2, #2
 800138a:	4013      	ands	r3, r2
 800138c:	d0dc      	beq.n	8001348 <HAL_RCC_OscConfig+0x32c>
 800138e:	e013      	b.n	80013b8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fbc8 	bl	8000b24 <HAL_GetTick>
 8001394:	0003      	movs	r3, r0
 8001396:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001398:	e009      	b.n	80013ae <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff fbc3 	bl	8000b24 <HAL_GetTick>
 800139e:	0002      	movs	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <HAL_RCC_OscConfig+0x3c0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e010      	b.n	80013d0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_RCC_OscConfig+0x3bc>)
 80013b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b2:	2202      	movs	r2, #2
 80013b4:	4013      	ands	r3, r2
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013b8:	230f      	movs	r3, #15
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d105      	bne.n	80013ce <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013c2:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_RCC_OscConfig+0x3bc>)
 80013c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013c6:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <HAL_RCC_OscConfig+0x3bc>)
 80013c8:	4905      	ldr	r1, [pc, #20]	@ (80013e0 <HAL_RCC_OscConfig+0x3c4>)
 80013ca:	400a      	ands	r2, r1
 80013cc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	0018      	movs	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b006      	add	sp, #24
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	00001388 	.word	0x00001388
 80013e0:	efffffff 	.word	0xefffffff

080013e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0e9      	b.n	80015cc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013f8:	4b76      	ldr	r3, [pc, #472]	@ (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2207      	movs	r2, #7
 80013fe:	4013      	ands	r3, r2
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d91e      	bls.n	8001444 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b73      	ldr	r3, [pc, #460]	@ (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2207      	movs	r2, #7
 800140c:	4393      	bics	r3, r2
 800140e:	0019      	movs	r1, r3
 8001410:	4b70      	ldr	r3, [pc, #448]	@ (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001418:	f7ff fb84 	bl	8000b24 <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001420:	e009      	b.n	8001436 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001422:	f7ff fb7f 	bl	8000b24 <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	4a6a      	ldr	r2, [pc, #424]	@ (80015d8 <HAL_RCC_ClockConfig+0x1f4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0ca      	b.n	80015cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001436:	4b67      	ldr	r3, [pc, #412]	@ (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2207      	movs	r2, #7
 800143c:	4013      	ands	r3, r2
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d1ee      	bne.n	8001422 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2202      	movs	r2, #2
 800144a:	4013      	ands	r3, r2
 800144c:	d017      	beq.n	800147e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2204      	movs	r2, #4
 8001454:	4013      	ands	r3, r2
 8001456:	d008      	beq.n	800146a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001458:	4b60      	ldr	r3, [pc, #384]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4a60      	ldr	r2, [pc, #384]	@ (80015e0 <HAL_RCC_ClockConfig+0x1fc>)
 800145e:	401a      	ands	r2, r3
 8001460:	4b5e      	ldr	r3, [pc, #376]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 8001462:	21b0      	movs	r1, #176	@ 0xb0
 8001464:	0109      	lsls	r1, r1, #4
 8001466:	430a      	orrs	r2, r1
 8001468:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800146a:	4b5c      	ldr	r3, [pc, #368]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	4a5d      	ldr	r2, [pc, #372]	@ (80015e4 <HAL_RCC_ClockConfig+0x200>)
 8001470:	4013      	ands	r3, r2
 8001472:	0019      	movs	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	4b58      	ldr	r3, [pc, #352]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 800147a:	430a      	orrs	r2, r1
 800147c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2201      	movs	r2, #1
 8001484:	4013      	ands	r3, r2
 8001486:	d055      	beq.n	8001534 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001488:	4b54      	ldr	r3, [pc, #336]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	221c      	movs	r2, #28
 800148e:	4393      	bics	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	4b51      	ldr	r3, [pc, #324]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a4:	4b4d      	ldr	r3, [pc, #308]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	029b      	lsls	r3, r3, #10
 80014ac:	4013      	ands	r3, r2
 80014ae:	d11f      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e08b      	b.n	80015cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d107      	bne.n	80014cc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014bc:	4b47      	ldr	r3, [pc, #284]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4013      	ands	r3, r2
 80014c6:	d113      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e07f      	b.n	80015cc <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80014d4:	4b41      	ldr	r3, [pc, #260]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 80014d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d8:	2202      	movs	r2, #2
 80014da:	4013      	ands	r3, r2
 80014dc:	d108      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e074      	b.n	80015cc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80014e2:	4b3e      	ldr	r3, [pc, #248]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 80014e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e6:	2202      	movs	r2, #2
 80014e8:	4013      	ands	r3, r2
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e06d      	b.n	80015cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014f0:	4b3a      	ldr	r3, [pc, #232]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2207      	movs	r2, #7
 80014f6:	4393      	bics	r3, r2
 80014f8:	0019      	movs	r1, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 8001500:	430a      	orrs	r2, r1
 8001502:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001504:	f7ff fb0e 	bl	8000b24 <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150c:	e009      	b.n	8001522 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800150e:	f7ff fb09 	bl	8000b24 <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	4a2f      	ldr	r2, [pc, #188]	@ (80015d8 <HAL_RCC_ClockConfig+0x1f4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e054      	b.n	80015cc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	4b2e      	ldr	r3, [pc, #184]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2238      	movs	r2, #56	@ 0x38
 8001528:	401a      	ands	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	429a      	cmp	r2, r3
 8001532:	d1ec      	bne.n	800150e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001534:	4b27      	ldr	r3, [pc, #156]	@ (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2207      	movs	r2, #7
 800153a:	4013      	ands	r3, r2
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d21e      	bcs.n	8001580 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2207      	movs	r2, #7
 8001548:	4393      	bics	r3, r2
 800154a:	0019      	movs	r1, r3
 800154c:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001554:	f7ff fae6 	bl	8000b24 <HAL_GetTick>
 8001558:	0003      	movs	r3, r0
 800155a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800155c:	e009      	b.n	8001572 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800155e:	f7ff fae1 	bl	8000b24 <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	4a1b      	ldr	r2, [pc, #108]	@ (80015d8 <HAL_RCC_ClockConfig+0x1f4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e02c      	b.n	80015cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2207      	movs	r2, #7
 8001578:	4013      	ands	r3, r2
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d1ee      	bne.n	800155e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2204      	movs	r2, #4
 8001586:	4013      	ands	r3, r2
 8001588:	d009      	beq.n	800159e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	4a16      	ldr	r2, [pc, #88]	@ (80015e8 <HAL_RCC_ClockConfig+0x204>)
 8001590:	4013      	ands	r3, r2
 8001592:	0019      	movs	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800159e:	f000 f82b 	bl	80015f8 <HAL_RCC_GetSysClockFreq>
 80015a2:	0001      	movs	r1, r0
 80015a4:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 80015a6:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	220f      	movs	r2, #15
 80015ac:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80015ae:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <HAL_RCC_ClockConfig+0x208>)
 80015b0:	0092      	lsls	r2, r2, #2
 80015b2:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80015b4:	221f      	movs	r2, #31
 80015b6:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80015b8:	000a      	movs	r2, r1
 80015ba:	40da      	lsrs	r2, r3
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <HAL_RCC_ClockConfig+0x20c>)
 80015be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <HAL_RCC_ClockConfig+0x210>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff fa51 	bl	8000a6c <HAL_InitTick>
 80015ca:	0003      	movs	r3, r0
}
 80015cc:	0018      	movs	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b004      	add	sp, #16
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40022000 	.word	0x40022000
 80015d8:	00001388 	.word	0x00001388
 80015dc:	40021000 	.word	0x40021000
 80015e0:	ffff84ff 	.word	0xffff84ff
 80015e4:	fffff0ff 	.word	0xfffff0ff
 80015e8:	ffff8fff 	.word	0xffff8fff
 80015ec:	08002aa8 	.word	0x08002aa8
 80015f0:	20001010 	.word	0x20001010
 80015f4:	20001014 	.word	0x20001014

080015f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 80015fe:	4b23      	ldr	r3, [pc, #140]	@ (800168c <HAL_RCC_GetSysClockFreq+0x94>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	2207      	movs	r2, #7
 8001606:	4013      	ands	r3, r2
 8001608:	3301      	adds	r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800160c:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <HAL_RCC_GetSysClockFreq+0x94>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2238      	movs	r2, #56	@ 0x38
 8001612:	4013      	ands	r3, r2
 8001614:	d10f      	bne.n	8001636 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001616:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <HAL_RCC_GetSysClockFreq+0x94>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	0adb      	lsrs	r3, r3, #11
 800161c:	2207      	movs	r2, #7
 800161e:	4013      	ands	r3, r2
 8001620:	2201      	movs	r2, #1
 8001622:	409a      	lsls	r2, r3
 8001624:	0013      	movs	r3, r2
 8001626:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4819      	ldr	r0, [pc, #100]	@ (8001690 <HAL_RCC_GetSysClockFreq+0x98>)
 800162c:	f7fe fd6c 	bl	8000108 <__udivsi3>
 8001630:	0003      	movs	r3, r0
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	e01e      	b.n	8001674 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_RCC_GetSysClockFreq+0x94>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2238      	movs	r2, #56	@ 0x38
 800163c:	4013      	ands	r3, r2
 800163e:	2b08      	cmp	r3, #8
 8001640:	d102      	bne.n	8001648 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001642:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e015      	b.n	8001674 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001648:	4b10      	ldr	r3, [pc, #64]	@ (800168c <HAL_RCC_GetSysClockFreq+0x94>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2238      	movs	r2, #56	@ 0x38
 800164e:	4013      	ands	r3, r2
 8001650:	2b20      	cmp	r3, #32
 8001652:	d103      	bne.n	800165c <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001654:	2380      	movs	r3, #128	@ 0x80
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800165c:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <HAL_RCC_GetSysClockFreq+0x94>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2238      	movs	r2, #56	@ 0x38
 8001662:	4013      	ands	r3, r2
 8001664:	2b18      	cmp	r3, #24
 8001666:	d103      	bne.n	8001670 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001668:	23fa      	movs	r3, #250	@ 0xfa
 800166a:	01db      	lsls	r3, r3, #7
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	e001      	b.n	8001674 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7fe fd46 	bl	8000108 <__udivsi3>
 800167c:	0003      	movs	r3, r0
 800167e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001680:	68fb      	ldr	r3, [r7, #12]
}
 8001682:	0018      	movs	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	b004      	add	sp, #16
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	40021000 	.word	0x40021000
 8001690:	02dc6c00 	.word	0x02dc6c00
 8001694:	007a1200 	.word	0x007a1200

08001698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e04a      	b.n	8001740 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	223d      	movs	r2, #61	@ 0x3d
 80016ae:	5c9b      	ldrb	r3, [r3, r2]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d107      	bne.n	80016c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	223c      	movs	r2, #60	@ 0x3c
 80016ba:	2100      	movs	r1, #0
 80016bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff f823 	bl	800070c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	223d      	movs	r2, #61	@ 0x3d
 80016ca:	2102      	movs	r1, #2
 80016cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3304      	adds	r3, #4
 80016d6:	0019      	movs	r1, r3
 80016d8:	0010      	movs	r0, r2
 80016da:	f000 fcc1 	bl	8002060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2248      	movs	r2, #72	@ 0x48
 80016e2:	2101      	movs	r1, #1
 80016e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	223e      	movs	r2, #62	@ 0x3e
 80016ea:	2101      	movs	r1, #1
 80016ec:	5499      	strb	r1, [r3, r2]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	223f      	movs	r2, #63	@ 0x3f
 80016f2:	2101      	movs	r1, #1
 80016f4:	5499      	strb	r1, [r3, r2]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2240      	movs	r2, #64	@ 0x40
 80016fa:	2101      	movs	r1, #1
 80016fc:	5499      	strb	r1, [r3, r2]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2241      	movs	r2, #65	@ 0x41
 8001702:	2101      	movs	r1, #1
 8001704:	5499      	strb	r1, [r3, r2]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2242      	movs	r2, #66	@ 0x42
 800170a:	2101      	movs	r1, #1
 800170c:	5499      	strb	r1, [r3, r2]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2243      	movs	r2, #67	@ 0x43
 8001712:	2101      	movs	r1, #1
 8001714:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2244      	movs	r2, #68	@ 0x44
 800171a:	2101      	movs	r1, #1
 800171c:	5499      	strb	r1, [r3, r2]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2245      	movs	r2, #69	@ 0x45
 8001722:	2101      	movs	r1, #1
 8001724:	5499      	strb	r1, [r3, r2]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2246      	movs	r2, #70	@ 0x46
 800172a:	2101      	movs	r1, #1
 800172c:	5499      	strb	r1, [r3, r2]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2247      	movs	r2, #71	@ 0x47
 8001732:	2101      	movs	r1, #1
 8001734:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	223d      	movs	r2, #61	@ 0x3d
 800173a:	2101      	movs	r1, #1
 800173c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b002      	add	sp, #8
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	223d      	movs	r2, #61	@ 0x3d
 8001754:	5c9b      	ldrb	r3, [r3, r2]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b01      	cmp	r3, #1
 800175a:	d001      	beq.n	8001760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e037      	b.n	80017d0 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	223d      	movs	r2, #61	@ 0x3d
 8001764:	2102      	movs	r1, #2
 8001766:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2101      	movs	r1, #1
 8001774:	430a      	orrs	r2, r1
 8001776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a16      	ldr	r2, [pc, #88]	@ (80017d8 <HAL_TIM_Base_Start_IT+0x90>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d004      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x44>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a15      	ldr	r2, [pc, #84]	@ (80017dc <HAL_TIM_Base_Start_IT+0x94>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d116      	bne.n	80017ba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	4a13      	ldr	r2, [pc, #76]	@ (80017e0 <HAL_TIM_Base_Start_IT+0x98>)
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b06      	cmp	r3, #6
 800179c:	d016      	beq.n	80017cc <HAL_TIM_Base_Start_IT+0x84>
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	2380      	movs	r3, #128	@ 0x80
 80017a2:	025b      	lsls	r3, r3, #9
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d011      	beq.n	80017cc <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2101      	movs	r1, #1
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017b8:	e008      	b.n	80017cc <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2101      	movs	r1, #1
 80017c6:	430a      	orrs	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e000      	b.n	80017ce <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	0018      	movs	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b004      	add	sp, #16
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40012c00 	.word	0x40012c00
 80017dc:	40000400 	.word	0x40000400
 80017e0:	00010007 	.word	0x00010007

080017e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e04a      	b.n	800188c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	223d      	movs	r2, #61	@ 0x3d
 80017fa:	5c9b      	ldrb	r3, [r3, r2]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d107      	bne.n	8001812 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	223c      	movs	r2, #60	@ 0x3c
 8001806:	2100      	movs	r1, #0
 8001808:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	0018      	movs	r0, r3
 800180e:	f000 f841 	bl	8001894 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	223d      	movs	r2, #61	@ 0x3d
 8001816:	2102      	movs	r1, #2
 8001818:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3304      	adds	r3, #4
 8001822:	0019      	movs	r1, r3
 8001824:	0010      	movs	r0, r2
 8001826:	f000 fc1b 	bl	8002060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2248      	movs	r2, #72	@ 0x48
 800182e:	2101      	movs	r1, #1
 8001830:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	223e      	movs	r2, #62	@ 0x3e
 8001836:	2101      	movs	r1, #1
 8001838:	5499      	strb	r1, [r3, r2]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	223f      	movs	r2, #63	@ 0x3f
 800183e:	2101      	movs	r1, #1
 8001840:	5499      	strb	r1, [r3, r2]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2240      	movs	r2, #64	@ 0x40
 8001846:	2101      	movs	r1, #1
 8001848:	5499      	strb	r1, [r3, r2]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2241      	movs	r2, #65	@ 0x41
 800184e:	2101      	movs	r1, #1
 8001850:	5499      	strb	r1, [r3, r2]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2242      	movs	r2, #66	@ 0x42
 8001856:	2101      	movs	r1, #1
 8001858:	5499      	strb	r1, [r3, r2]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2243      	movs	r2, #67	@ 0x43
 800185e:	2101      	movs	r1, #1
 8001860:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2244      	movs	r2, #68	@ 0x44
 8001866:	2101      	movs	r1, #1
 8001868:	5499      	strb	r1, [r3, r2]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2245      	movs	r2, #69	@ 0x45
 800186e:	2101      	movs	r1, #1
 8001870:	5499      	strb	r1, [r3, r2]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2246      	movs	r2, #70	@ 0x46
 8001876:	2101      	movs	r1, #1
 8001878:	5499      	strb	r1, [r3, r2]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2247      	movs	r2, #71	@ 0x47
 800187e:	2101      	movs	r1, #1
 8001880:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	223d      	movs	r2, #61	@ 0x3d
 8001886:	2101      	movs	r1, #1
 8001888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800189c:	46c0      	nop			@ (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b002      	add	sp, #8
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d108      	bne.n	80018c6 <HAL_TIM_PWM_Start+0x22>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	223e      	movs	r2, #62	@ 0x3e
 80018b8:	5c9b      	ldrb	r3, [r3, r2]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	3b01      	subs	r3, #1
 80018be:	1e5a      	subs	r2, r3, #1
 80018c0:	4193      	sbcs	r3, r2
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	e037      	b.n	8001936 <HAL_TIM_PWM_Start+0x92>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d108      	bne.n	80018de <HAL_TIM_PWM_Start+0x3a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	223f      	movs	r2, #63	@ 0x3f
 80018d0:	5c9b      	ldrb	r3, [r3, r2]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	3b01      	subs	r3, #1
 80018d6:	1e5a      	subs	r2, r3, #1
 80018d8:	4193      	sbcs	r3, r2
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	e02b      	b.n	8001936 <HAL_TIM_PWM_Start+0x92>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d108      	bne.n	80018f6 <HAL_TIM_PWM_Start+0x52>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2240      	movs	r2, #64	@ 0x40
 80018e8:	5c9b      	ldrb	r3, [r3, r2]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	1e5a      	subs	r2, r3, #1
 80018f0:	4193      	sbcs	r3, r2
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	e01f      	b.n	8001936 <HAL_TIM_PWM_Start+0x92>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b0c      	cmp	r3, #12
 80018fa:	d108      	bne.n	800190e <HAL_TIM_PWM_Start+0x6a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2241      	movs	r2, #65	@ 0x41
 8001900:	5c9b      	ldrb	r3, [r3, r2]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	3b01      	subs	r3, #1
 8001906:	1e5a      	subs	r2, r3, #1
 8001908:	4193      	sbcs	r3, r2
 800190a:	b2db      	uxtb	r3, r3
 800190c:	e013      	b.n	8001936 <HAL_TIM_PWM_Start+0x92>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b10      	cmp	r3, #16
 8001912:	d108      	bne.n	8001926 <HAL_TIM_PWM_Start+0x82>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2242      	movs	r2, #66	@ 0x42
 8001918:	5c9b      	ldrb	r3, [r3, r2]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	3b01      	subs	r3, #1
 800191e:	1e5a      	subs	r2, r3, #1
 8001920:	4193      	sbcs	r3, r2
 8001922:	b2db      	uxtb	r3, r3
 8001924:	e007      	b.n	8001936 <HAL_TIM_PWM_Start+0x92>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2243      	movs	r2, #67	@ 0x43
 800192a:	5c9b      	ldrb	r3, [r3, r2]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	1e5a      	subs	r2, r3, #1
 8001932:	4193      	sbcs	r3, r2
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e07b      	b.n	8001a36 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d104      	bne.n	800194e <HAL_TIM_PWM_Start+0xaa>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	223e      	movs	r2, #62	@ 0x3e
 8001948:	2102      	movs	r1, #2
 800194a:	5499      	strb	r1, [r3, r2]
 800194c:	e023      	b.n	8001996 <HAL_TIM_PWM_Start+0xf2>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d104      	bne.n	800195e <HAL_TIM_PWM_Start+0xba>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	223f      	movs	r2, #63	@ 0x3f
 8001958:	2102      	movs	r1, #2
 800195a:	5499      	strb	r1, [r3, r2]
 800195c:	e01b      	b.n	8001996 <HAL_TIM_PWM_Start+0xf2>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d104      	bne.n	800196e <HAL_TIM_PWM_Start+0xca>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2240      	movs	r2, #64	@ 0x40
 8001968:	2102      	movs	r1, #2
 800196a:	5499      	strb	r1, [r3, r2]
 800196c:	e013      	b.n	8001996 <HAL_TIM_PWM_Start+0xf2>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b0c      	cmp	r3, #12
 8001972:	d104      	bne.n	800197e <HAL_TIM_PWM_Start+0xda>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2241      	movs	r2, #65	@ 0x41
 8001978:	2102      	movs	r1, #2
 800197a:	5499      	strb	r1, [r3, r2]
 800197c:	e00b      	b.n	8001996 <HAL_TIM_PWM_Start+0xf2>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b10      	cmp	r3, #16
 8001982:	d104      	bne.n	800198e <HAL_TIM_PWM_Start+0xea>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2242      	movs	r2, #66	@ 0x42
 8001988:	2102      	movs	r1, #2
 800198a:	5499      	strb	r1, [r3, r2]
 800198c:	e003      	b.n	8001996 <HAL_TIM_PWM_Start+0xf2>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2243      	movs	r2, #67	@ 0x43
 8001992:	2102      	movs	r1, #2
 8001994:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	2201      	movs	r2, #1
 800199e:	0018      	movs	r0, r3
 80019a0:	f000 ff10 	bl	80027c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a25      	ldr	r2, [pc, #148]	@ (8001a40 <HAL_TIM_PWM_Start+0x19c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d009      	beq.n	80019c2 <HAL_TIM_PWM_Start+0x11e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a24      	ldr	r2, [pc, #144]	@ (8001a44 <HAL_TIM_PWM_Start+0x1a0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d004      	beq.n	80019c2 <HAL_TIM_PWM_Start+0x11e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a22      	ldr	r2, [pc, #136]	@ (8001a48 <HAL_TIM_PWM_Start+0x1a4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_TIM_PWM_Start+0x122>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_TIM_PWM_Start+0x124>
 80019c6:	2300      	movs	r3, #0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2180      	movs	r1, #128	@ 0x80
 80019d8:	0209      	lsls	r1, r1, #8
 80019da:	430a      	orrs	r2, r1
 80019dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a17      	ldr	r2, [pc, #92]	@ (8001a40 <HAL_TIM_PWM_Start+0x19c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d004      	beq.n	80019f2 <HAL_TIM_PWM_Start+0x14e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a17      	ldr	r2, [pc, #92]	@ (8001a4c <HAL_TIM_PWM_Start+0x1a8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d116      	bne.n	8001a20 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a15      	ldr	r2, [pc, #84]	@ (8001a50 <HAL_TIM_PWM_Start+0x1ac>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b06      	cmp	r3, #6
 8001a02:	d016      	beq.n	8001a32 <HAL_TIM_PWM_Start+0x18e>
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	2380      	movs	r3, #128	@ 0x80
 8001a08:	025b      	lsls	r3, r3, #9
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d011      	beq.n	8001a32 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1e:	e008      	b.n	8001a32 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e000      	b.n	8001a34 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a32:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b004      	add	sp, #16
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40014400 	.word	0x40014400
 8001a48:	40014800 	.word	0x40014800
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	00010007 	.word	0x00010007

08001a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d021      	beq.n	8001ab8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2202      	movs	r2, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d01d      	beq.n	8001ab8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2203      	movs	r2, #3
 8001a82:	4252      	negs	r2, r2
 8001a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2203      	movs	r2, #3
 8001a94:	4013      	ands	r3, r2
 8001a96:	d004      	beq.n	8001aa2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 fac8 	bl	8002030 <HAL_TIM_IC_CaptureCallback>
 8001aa0:	e007      	b.n	8001ab2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f000 fabb 	bl	8002020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 fac7 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2204      	movs	r2, #4
 8001abc:	4013      	ands	r3, r2
 8001abe:	d022      	beq.n	8001b06 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d01e      	beq.n	8001b06 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2205      	movs	r2, #5
 8001ace:	4252      	negs	r2, r2
 8001ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	23c0      	movs	r3, #192	@ 0xc0
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d004      	beq.n	8001af0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f000 faa1 	bl	8002030 <HAL_TIM_IC_CaptureCallback>
 8001aee:	e007      	b.n	8001b00 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	0018      	movs	r0, r3
 8001af4:	f000 fa94 	bl	8002020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	0018      	movs	r0, r3
 8001afc:	f000 faa0 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2208      	movs	r2, #8
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d021      	beq.n	8001b52 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2208      	movs	r2, #8
 8001b12:	4013      	ands	r3, r2
 8001b14:	d01d      	beq.n	8001b52 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2209      	movs	r2, #9
 8001b1c:	4252      	negs	r2, r2
 8001b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2204      	movs	r2, #4
 8001b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d004      	beq.n	8001b3c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f000 fa7b 	bl	8002030 <HAL_TIM_IC_CaptureCallback>
 8001b3a:	e007      	b.n	8001b4c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 fa6e 	bl	8002020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 fa7a 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2210      	movs	r2, #16
 8001b56:	4013      	ands	r3, r2
 8001b58:	d022      	beq.n	8001ba0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d01e      	beq.n	8001ba0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2211      	movs	r2, #17
 8001b68:	4252      	negs	r2, r2
 8001b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2208      	movs	r2, #8
 8001b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	23c0      	movs	r3, #192	@ 0xc0
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d004      	beq.n	8001b8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	0018      	movs	r0, r3
 8001b84:	f000 fa54 	bl	8002030 <HAL_TIM_IC_CaptureCallback>
 8001b88:	e007      	b.n	8001b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 fa47 	bl	8002020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 fa53 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d00c      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	4013      	ands	r3, r2
 8001bae:	d008      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	4252      	negs	r2, r2
 8001bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f000 fa27 	bl	8002010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2280      	movs	r2, #128	@ 0x80
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d104      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	019b      	lsls	r3, r3, #6
 8001bd0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001bd2:	d00b      	beq.n	8001bec <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2280      	movs	r2, #128	@ 0x80
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d007      	beq.n	8001bec <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c5c <HAL_TIM_IRQHandler+0x208>)
 8001be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f000 ff16 	bl	8002a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	2380      	movs	r3, #128	@ 0x80
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d00b      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2280      	movs	r2, #128	@ 0x80
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d007      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a17      	ldr	r2, [pc, #92]	@ (8001c60 <HAL_TIM_IRQHandler+0x20c>)
 8001c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f000 ff0d 	bl	8002a28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2240      	movs	r2, #64	@ 0x40
 8001c12:	4013      	ands	r3, r2
 8001c14:	d00c      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2240      	movs	r2, #64	@ 0x40
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d008      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2241      	movs	r2, #65	@ 0x41
 8001c24:	4252      	negs	r2, r2
 8001c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f000 fa10 	bl	8002050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2220      	movs	r2, #32
 8001c34:	4013      	ands	r3, r2
 8001c36:	d00c      	beq.n	8001c52 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d008      	beq.n	8001c52 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2221      	movs	r2, #33	@ 0x21
 8001c46:	4252      	negs	r2, r2
 8001c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f000 fedb 	bl	8002a08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b004      	add	sp, #16
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	ffffdf7f 	.word	0xffffdf7f
 8001c60:	fffffeff 	.word	0xfffffeff

08001c64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c70:	2317      	movs	r3, #23
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	223c      	movs	r2, #60	@ 0x3c
 8001c7c:	5c9b      	ldrb	r3, [r3, r2]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e0e5      	b.n	8001e52 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	223c      	movs	r2, #60	@ 0x3c
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b14      	cmp	r3, #20
 8001c92:	d900      	bls.n	8001c96 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001c94:	e0d1      	b.n	8001e3a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	009a      	lsls	r2, r3, #2
 8001c9a:	4b70      	ldr	r3, [pc, #448]	@ (8001e5c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001c9c:	18d3      	adds	r3, r2, r3
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	0011      	movs	r1, r2
 8001caa:	0018      	movs	r0, r3
 8001cac:	f000 fa52 	bl	8002154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2108      	movs	r1, #8
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2104      	movs	r1, #4
 8001ccc:	438a      	bics	r2, r1
 8001cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6999      	ldr	r1, [r3, #24]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	619a      	str	r2, [r3, #24]
      break;
 8001ce2:	e0af      	b.n	8001e44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	0011      	movs	r1, r2
 8001cec:	0018      	movs	r0, r3
 8001cee:	f000 fab1 	bl	8002254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699a      	ldr	r2, [r3, #24]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2180      	movs	r1, #128	@ 0x80
 8001cfe:	0109      	lsls	r1, r1, #4
 8001d00:	430a      	orrs	r2, r1
 8001d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4954      	ldr	r1, [pc, #336]	@ (8001e60 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001d10:	400a      	ands	r2, r1
 8001d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6999      	ldr	r1, [r3, #24]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	021a      	lsls	r2, r3, #8
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	619a      	str	r2, [r3, #24]
      break;
 8001d28:	e08c      	b.n	8001e44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	0011      	movs	r1, r2
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 fb0c 	bl	8002350 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2108      	movs	r1, #8
 8001d44:	430a      	orrs	r2, r1
 8001d46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2104      	movs	r1, #4
 8001d54:	438a      	bics	r2, r1
 8001d56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69d9      	ldr	r1, [r3, #28]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	61da      	str	r2, [r3, #28]
      break;
 8001d6a:	e06b      	b.n	8001e44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	0011      	movs	r1, r2
 8001d74:	0018      	movs	r0, r3
 8001d76:	f000 fb6d 	bl	8002454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2180      	movs	r1, #128	@ 0x80
 8001d86:	0109      	lsls	r1, r1, #4
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69da      	ldr	r2, [r3, #28]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4932      	ldr	r1, [pc, #200]	@ (8001e60 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001d98:	400a      	ands	r2, r1
 8001d9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69d9      	ldr	r1, [r3, #28]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	021a      	lsls	r2, r3, #8
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	61da      	str	r2, [r3, #28]
      break;
 8001db0:	e048      	b.n	8001e44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	0011      	movs	r1, r2
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 fbae 	bl	800251c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2108      	movs	r1, #8
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2104      	movs	r1, #4
 8001ddc:	438a      	bics	r2, r1
 8001dde:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001df2:	e027      	b.n	8001e44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 fbe7 	bl	80025d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2180      	movs	r1, #128	@ 0x80
 8001e0e:	0109      	lsls	r1, r1, #4
 8001e10:	430a      	orrs	r2, r1
 8001e12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4910      	ldr	r1, [pc, #64]	@ (8001e60 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001e20:	400a      	ands	r2, r1
 8001e22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	021a      	lsls	r2, r3, #8
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001e38:	e004      	b.n	8001e44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001e3a:	2317      	movs	r3, #23
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
      break;
 8001e42:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	223c      	movs	r2, #60	@ 0x3c
 8001e48:	2100      	movs	r1, #0
 8001e4a:	5499      	strb	r1, [r3, r2]

  return status;
 8001e4c:	2317      	movs	r3, #23
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	781b      	ldrb	r3, [r3, #0]
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b006      	add	sp, #24
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	08002ae8 	.word	0x08002ae8
 8001e60:	fffffbff 	.word	0xfffffbff

08001e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6e:	230f      	movs	r3, #15
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	223c      	movs	r2, #60	@ 0x3c
 8001e7a:	5c9b      	ldrb	r3, [r3, r2]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_TIM_ConfigClockSource+0x20>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e0bc      	b.n	8001ffe <HAL_TIM_ConfigClockSource+0x19a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	223c      	movs	r2, #60	@ 0x3c
 8001e88:	2101      	movs	r1, #1
 8001e8a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	223d      	movs	r2, #61	@ 0x3d
 8001e90:	2102      	movs	r1, #2
 8001e92:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4a5a      	ldr	r2, [pc, #360]	@ (8002008 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	4a59      	ldr	r2, [pc, #356]	@ (800200c <HAL_TIM_ConfigClockSource+0x1a8>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2280      	movs	r2, #128	@ 0x80
 8001eba:	0192      	lsls	r2, r2, #6
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d040      	beq.n	8001f42 <HAL_TIM_ConfigClockSource+0xde>
 8001ec0:	2280      	movs	r2, #128	@ 0x80
 8001ec2:	0192      	lsls	r2, r2, #6
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d900      	bls.n	8001eca <HAL_TIM_ConfigClockSource+0x66>
 8001ec8:	e088      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0x178>
 8001eca:	2280      	movs	r2, #128	@ 0x80
 8001ecc:	0152      	lsls	r2, r2, #5
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d100      	bne.n	8001ed4 <HAL_TIM_ConfigClockSource+0x70>
 8001ed2:	e088      	b.n	8001fe6 <HAL_TIM_ConfigClockSource+0x182>
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	0152      	lsls	r2, r2, #5
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d900      	bls.n	8001ede <HAL_TIM_ConfigClockSource+0x7a>
 8001edc:	e07e      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0x178>
 8001ede:	2b70      	cmp	r3, #112	@ 0x70
 8001ee0:	d018      	beq.n	8001f14 <HAL_TIM_ConfigClockSource+0xb0>
 8001ee2:	d900      	bls.n	8001ee6 <HAL_TIM_ConfigClockSource+0x82>
 8001ee4:	e07a      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0x178>
 8001ee6:	2b60      	cmp	r3, #96	@ 0x60
 8001ee8:	d04f      	beq.n	8001f8a <HAL_TIM_ConfigClockSource+0x126>
 8001eea:	d900      	bls.n	8001eee <HAL_TIM_ConfigClockSource+0x8a>
 8001eec:	e076      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0x178>
 8001eee:	2b50      	cmp	r3, #80	@ 0x50
 8001ef0:	d03b      	beq.n	8001f6a <HAL_TIM_ConfigClockSource+0x106>
 8001ef2:	d900      	bls.n	8001ef6 <HAL_TIM_ConfigClockSource+0x92>
 8001ef4:	e072      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0x178>
 8001ef6:	2b40      	cmp	r3, #64	@ 0x40
 8001ef8:	d057      	beq.n	8001faa <HAL_TIM_ConfigClockSource+0x146>
 8001efa:	d900      	bls.n	8001efe <HAL_TIM_ConfigClockSource+0x9a>
 8001efc:	e06e      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0x178>
 8001efe:	2b30      	cmp	r3, #48	@ 0x30
 8001f00:	d063      	beq.n	8001fca <HAL_TIM_ConfigClockSource+0x166>
 8001f02:	d86b      	bhi.n	8001fdc <HAL_TIM_ConfigClockSource+0x178>
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	d060      	beq.n	8001fca <HAL_TIM_ConfigClockSource+0x166>
 8001f08:	d868      	bhi.n	8001fdc <HAL_TIM_ConfigClockSource+0x178>
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d05d      	beq.n	8001fca <HAL_TIM_ConfigClockSource+0x166>
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d05b      	beq.n	8001fca <HAL_TIM_ConfigClockSource+0x166>
 8001f12:	e063      	b.n	8001fdc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f24:	f000 fc2e 	bl	8002784 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2277      	movs	r2, #119	@ 0x77
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	609a      	str	r2, [r3, #8]
      break;
 8001f40:	e052      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f52:	f000 fc17 	bl	8002784 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2180      	movs	r1, #128	@ 0x80
 8001f62:	01c9      	lsls	r1, r1, #7
 8001f64:	430a      	orrs	r2, r1
 8001f66:	609a      	str	r2, [r3, #8]
      break;
 8001f68:	e03e      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f76:	001a      	movs	r2, r3
 8001f78:	f000 fb88 	bl	800268c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2150      	movs	r1, #80	@ 0x50
 8001f82:	0018      	movs	r0, r3
 8001f84:	f000 fbe2 	bl	800274c <TIM_ITRx_SetConfig>
      break;
 8001f88:	e02e      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f96:	001a      	movs	r2, r3
 8001f98:	f000 fba6 	bl	80026e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2160      	movs	r1, #96	@ 0x60
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f000 fbd2 	bl	800274c <TIM_ITRx_SetConfig>
      break;
 8001fa8:	e01e      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fb6:	001a      	movs	r2, r3
 8001fb8:	f000 fb68 	bl	800268c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2140      	movs	r1, #64	@ 0x40
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 fbc2 	bl	800274c <TIM_ITRx_SetConfig>
      break;
 8001fc8:	e00e      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	0010      	movs	r0, r2
 8001fd6:	f000 fbb9 	bl	800274c <TIM_ITRx_SetConfig>
      break;
 8001fda:	e005      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001fdc:	230f      	movs	r3, #15
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
      break;
 8001fe4:	e000      	b.n	8001fe8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001fe6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	223d      	movs	r2, #61	@ 0x3d
 8001fec:	2101      	movs	r1, #1
 8001fee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	223c      	movs	r2, #60	@ 0x3c
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	5499      	strb	r1, [r3, r2]

  return status;
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	781b      	ldrb	r3, [r3, #0]
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b004      	add	sp, #16
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	ffceff88 	.word	0xffceff88
 800200c:	ffff00ff 	.word	0xffff00ff

08002010 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002018:	46c0      	nop			@ (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	b002      	add	sp, #8
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002028:	46c0      	nop			@ (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002038:	46c0      	nop			@ (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002048:	46c0      	nop			@ (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002058:	46c0      	nop			@ (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}

08002060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a32      	ldr	r2, [pc, #200]	@ (800213c <TIM_Base_SetConfig+0xdc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <TIM_Base_SetConfig+0x20>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a31      	ldr	r2, [pc, #196]	@ (8002140 <TIM_Base_SetConfig+0xe0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d108      	bne.n	8002092 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2270      	movs	r2, #112	@ 0x70
 8002084:	4393      	bics	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a29      	ldr	r2, [pc, #164]	@ (800213c <TIM_Base_SetConfig+0xdc>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00f      	beq.n	80020ba <TIM_Base_SetConfig+0x5a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a28      	ldr	r2, [pc, #160]	@ (8002140 <TIM_Base_SetConfig+0xe0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00b      	beq.n	80020ba <TIM_Base_SetConfig+0x5a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a27      	ldr	r2, [pc, #156]	@ (8002144 <TIM_Base_SetConfig+0xe4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d007      	beq.n	80020ba <TIM_Base_SetConfig+0x5a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a26      	ldr	r2, [pc, #152]	@ (8002148 <TIM_Base_SetConfig+0xe8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d003      	beq.n	80020ba <TIM_Base_SetConfig+0x5a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a25      	ldr	r2, [pc, #148]	@ (800214c <TIM_Base_SetConfig+0xec>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d108      	bne.n	80020cc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4a24      	ldr	r2, [pc, #144]	@ (8002150 <TIM_Base_SetConfig+0xf0>)
 80020be:	4013      	ands	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2280      	movs	r2, #128	@ 0x80
 80020d0:	4393      	bics	r3, r2
 80020d2:	001a      	movs	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a11      	ldr	r2, [pc, #68]	@ (800213c <TIM_Base_SetConfig+0xdc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <TIM_Base_SetConfig+0xaa>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <TIM_Base_SetConfig+0xe8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d003      	beq.n	800210a <TIM_Base_SetConfig+0xaa>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a11      	ldr	r2, [pc, #68]	@ (800214c <TIM_Base_SetConfig+0xec>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d103      	bne.n	8002112 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
 8002120:	2b01      	cmp	r3, #1
 8002122:	d106      	bne.n	8002132 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	2201      	movs	r2, #1
 800212a:	4393      	bics	r3, r2
 800212c:	001a      	movs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	611a      	str	r2, [r3, #16]
  }
}
 8002132:	46c0      	nop			@ (mov r8, r8)
 8002134:	46bd      	mov	sp, r7
 8002136:	b004      	add	sp, #16
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			@ (mov r8, r8)
 800213c:	40012c00 	.word	0x40012c00
 8002140:	40000400 	.word	0x40000400
 8002144:	40002000 	.word	0x40002000
 8002148:	40014400 	.word	0x40014400
 800214c:	40014800 	.word	0x40014800
 8002150:	fffffcff 	.word	0xfffffcff

08002154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	2201      	movs	r2, #1
 800216a:	4393      	bics	r3, r2
 800216c:	001a      	movs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4a2e      	ldr	r2, [pc, #184]	@ (800223c <TIM_OC1_SetConfig+0xe8>)
 8002182:	4013      	ands	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2203      	movs	r2, #3
 800218a:	4393      	bics	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2202      	movs	r2, #2
 800219c:	4393      	bics	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a24      	ldr	r2, [pc, #144]	@ (8002240 <TIM_OC1_SetConfig+0xec>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d007      	beq.n	80021c2 <TIM_OC1_SetConfig+0x6e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a23      	ldr	r2, [pc, #140]	@ (8002244 <TIM_OC1_SetConfig+0xf0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d003      	beq.n	80021c2 <TIM_OC1_SetConfig+0x6e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a22      	ldr	r2, [pc, #136]	@ (8002248 <TIM_OC1_SetConfig+0xf4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d10c      	bne.n	80021dc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2208      	movs	r2, #8
 80021c6:	4393      	bics	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2204      	movs	r2, #4
 80021d8:	4393      	bics	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a18      	ldr	r2, [pc, #96]	@ (8002240 <TIM_OC1_SetConfig+0xec>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d007      	beq.n	80021f4 <TIM_OC1_SetConfig+0xa0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a17      	ldr	r2, [pc, #92]	@ (8002244 <TIM_OC1_SetConfig+0xf0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d003      	beq.n	80021f4 <TIM_OC1_SetConfig+0xa0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a16      	ldr	r2, [pc, #88]	@ (8002248 <TIM_OC1_SetConfig+0xf4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d111      	bne.n	8002218 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4a15      	ldr	r2, [pc, #84]	@ (800224c <TIM_OC1_SetConfig+0xf8>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4a14      	ldr	r2, [pc, #80]	@ (8002250 <TIM_OC1_SetConfig+0xfc>)
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	621a      	str	r2, [r3, #32]
}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	b006      	add	sp, #24
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	fffeff8f 	.word	0xfffeff8f
 8002240:	40012c00 	.word	0x40012c00
 8002244:	40014400 	.word	0x40014400
 8002248:	40014800 	.word	0x40014800
 800224c:	fffffeff 	.word	0xfffffeff
 8002250:	fffffdff 	.word	0xfffffdff

08002254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	2210      	movs	r2, #16
 800226a:	4393      	bics	r3, r2
 800226c:	001a      	movs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a2c      	ldr	r2, [pc, #176]	@ (8002334 <TIM_OC2_SetConfig+0xe0>)
 8002282:	4013      	ands	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4a2b      	ldr	r2, [pc, #172]	@ (8002338 <TIM_OC2_SetConfig+0xe4>)
 800228a:	4013      	ands	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2220      	movs	r2, #32
 800229e:	4393      	bics	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a22      	ldr	r2, [pc, #136]	@ (800233c <TIM_OC2_SetConfig+0xe8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d10d      	bne.n	80022d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2280      	movs	r2, #128	@ 0x80
 80022ba:	4393      	bics	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2240      	movs	r2, #64	@ 0x40
 80022ce:	4393      	bics	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a19      	ldr	r2, [pc, #100]	@ (800233c <TIM_OC2_SetConfig+0xe8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <TIM_OC2_SetConfig+0x96>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a18      	ldr	r2, [pc, #96]	@ (8002340 <TIM_OC2_SetConfig+0xec>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d003      	beq.n	80022ea <TIM_OC2_SetConfig+0x96>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a17      	ldr	r2, [pc, #92]	@ (8002344 <TIM_OC2_SetConfig+0xf0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d113      	bne.n	8002312 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4a16      	ldr	r2, [pc, #88]	@ (8002348 <TIM_OC2_SetConfig+0xf4>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4a15      	ldr	r2, [pc, #84]	@ (800234c <TIM_OC2_SetConfig+0xf8>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	621a      	str	r2, [r3, #32]
}
 800232c:	46c0      	nop			@ (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	b006      	add	sp, #24
 8002332:	bd80      	pop	{r7, pc}
 8002334:	feff8fff 	.word	0xfeff8fff
 8002338:	fffffcff 	.word	0xfffffcff
 800233c:	40012c00 	.word	0x40012c00
 8002340:	40014400 	.word	0x40014400
 8002344:	40014800 	.word	0x40014800
 8002348:	fffffbff 	.word	0xfffffbff
 800234c:	fffff7ff 	.word	0xfffff7ff

08002350 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4a31      	ldr	r2, [pc, #196]	@ (800242c <TIM_OC3_SetConfig+0xdc>)
 8002366:	401a      	ands	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4a2d      	ldr	r2, [pc, #180]	@ (8002430 <TIM_OC3_SetConfig+0xe0>)
 800237c:	4013      	ands	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2203      	movs	r2, #3
 8002384:	4393      	bics	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	4a27      	ldr	r2, [pc, #156]	@ (8002434 <TIM_OC3_SetConfig+0xe4>)
 8002396:	4013      	ands	r3, r2
 8002398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a23      	ldr	r2, [pc, #140]	@ (8002438 <TIM_OC3_SetConfig+0xe8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10d      	bne.n	80023ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	4a22      	ldr	r2, [pc, #136]	@ (800243c <TIM_OC3_SetConfig+0xec>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	4313      	orrs	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002440 <TIM_OC3_SetConfig+0xf0>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002438 <TIM_OC3_SetConfig+0xe8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <TIM_OC3_SetConfig+0x92>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <TIM_OC3_SetConfig+0xf4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d003      	beq.n	80023e2 <TIM_OC3_SetConfig+0x92>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002448 <TIM_OC3_SetConfig+0xf8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d113      	bne.n	800240a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4a19      	ldr	r2, [pc, #100]	@ (800244c <TIM_OC3_SetConfig+0xfc>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4a18      	ldr	r2, [pc, #96]	@ (8002450 <TIM_OC3_SetConfig+0x100>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	621a      	str	r2, [r3, #32]
}
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b006      	add	sp, #24
 800242a:	bd80      	pop	{r7, pc}
 800242c:	fffffeff 	.word	0xfffffeff
 8002430:	fffeff8f 	.word	0xfffeff8f
 8002434:	fffffdff 	.word	0xfffffdff
 8002438:	40012c00 	.word	0x40012c00
 800243c:	fffff7ff 	.word	0xfffff7ff
 8002440:	fffffbff 	.word	0xfffffbff
 8002444:	40014400 	.word	0x40014400
 8002448:	40014800 	.word	0x40014800
 800244c:	ffffefff 	.word	0xffffefff
 8002450:	ffffdfff 	.word	0xffffdfff

08002454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a24      	ldr	r2, [pc, #144]	@ (80024fc <TIM_OC4_SetConfig+0xa8>)
 800246a:	401a      	ands	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4a20      	ldr	r2, [pc, #128]	@ (8002500 <TIM_OC4_SetConfig+0xac>)
 8002480:	4013      	ands	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a1f      	ldr	r2, [pc, #124]	@ (8002504 <TIM_OC4_SetConfig+0xb0>)
 8002488:	4013      	ands	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4a1b      	ldr	r2, [pc, #108]	@ (8002508 <TIM_OC4_SetConfig+0xb4>)
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	031b      	lsls	r3, r3, #12
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a17      	ldr	r2, [pc, #92]	@ (800250c <TIM_OC4_SetConfig+0xb8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d007      	beq.n	80024c4 <TIM_OC4_SetConfig+0x70>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a16      	ldr	r2, [pc, #88]	@ (8002510 <TIM_OC4_SetConfig+0xbc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <TIM_OC4_SetConfig+0x70>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a15      	ldr	r2, [pc, #84]	@ (8002514 <TIM_OC4_SetConfig+0xc0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d109      	bne.n	80024d8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	4a14      	ldr	r2, [pc, #80]	@ (8002518 <TIM_OC4_SetConfig+0xc4>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	019b      	lsls	r3, r3, #6
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	621a      	str	r2, [r3, #32]
}
 80024f2:	46c0      	nop			@ (mov r8, r8)
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b006      	add	sp, #24
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	ffffefff 	.word	0xffffefff
 8002500:	feff8fff 	.word	0xfeff8fff
 8002504:	fffffcff 	.word	0xfffffcff
 8002508:	ffffdfff 	.word	0xffffdfff
 800250c:	40012c00 	.word	0x40012c00
 8002510:	40014400 	.word	0x40014400
 8002514:	40014800 	.word	0x40014800
 8002518:	ffffbfff 	.word	0xffffbfff

0800251c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4a21      	ldr	r2, [pc, #132]	@ (80025b8 <TIM_OC5_SetConfig+0x9c>)
 8002532:	401a      	ands	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4a1d      	ldr	r2, [pc, #116]	@ (80025bc <TIM_OC5_SetConfig+0xa0>)
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4a19      	ldr	r2, [pc, #100]	@ (80025c0 <TIM_OC5_SetConfig+0xa4>)
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a15      	ldr	r2, [pc, #84]	@ (80025c4 <TIM_OC5_SetConfig+0xa8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <TIM_OC5_SetConfig+0x66>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a14      	ldr	r2, [pc, #80]	@ (80025c8 <TIM_OC5_SetConfig+0xac>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d003      	beq.n	8002582 <TIM_OC5_SetConfig+0x66>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a13      	ldr	r2, [pc, #76]	@ (80025cc <TIM_OC5_SetConfig+0xb0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d109      	bne.n	8002596 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	4a0c      	ldr	r2, [pc, #48]	@ (80025b8 <TIM_OC5_SetConfig+0x9c>)
 8002586:	4013      	ands	r3, r2
 8002588:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	621a      	str	r2, [r3, #32]
}
 80025b0:	46c0      	nop			@ (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b006      	add	sp, #24
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	fffeffff 	.word	0xfffeffff
 80025bc:	fffeff8f 	.word	0xfffeff8f
 80025c0:	fffdffff 	.word	0xfffdffff
 80025c4:	40012c00 	.word	0x40012c00
 80025c8:	40014400 	.word	0x40014400
 80025cc:	40014800 	.word	0x40014800

080025d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4a22      	ldr	r2, [pc, #136]	@ (8002670 <TIM_OC6_SetConfig+0xa0>)
 80025e6:	401a      	ands	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002674 <TIM_OC6_SetConfig+0xa4>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4a1a      	ldr	r2, [pc, #104]	@ (8002678 <TIM_OC6_SetConfig+0xa8>)
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	051b      	lsls	r3, r3, #20
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a16      	ldr	r2, [pc, #88]	@ (800267c <TIM_OC6_SetConfig+0xac>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d007      	beq.n	8002638 <TIM_OC6_SetConfig+0x68>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a15      	ldr	r2, [pc, #84]	@ (8002680 <TIM_OC6_SetConfig+0xb0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d003      	beq.n	8002638 <TIM_OC6_SetConfig+0x68>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <TIM_OC6_SetConfig+0xb4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d109      	bne.n	800264c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <TIM_OC6_SetConfig+0xb8>)
 800263c:	4013      	ands	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	029b      	lsls	r3, r3, #10
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	621a      	str	r2, [r3, #32]
}
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	b006      	add	sp, #24
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	ffefffff 	.word	0xffefffff
 8002674:	feff8fff 	.word	0xfeff8fff
 8002678:	ffdfffff 	.word	0xffdfffff
 800267c:	40012c00 	.word	0x40012c00
 8002680:	40014400 	.word	0x40014400
 8002684:	40014800 	.word	0x40014800
 8002688:	fffbffff 	.word	0xfffbffff

0800268c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	2201      	movs	r2, #1
 80026a4:	4393      	bics	r3, r2
 80026a6:	001a      	movs	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	22f0      	movs	r2, #240	@ 0xf0
 80026b6:	4393      	bics	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	220a      	movs	r2, #10
 80026c8:	4393      	bics	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	621a      	str	r2, [r3, #32]
}
 80026e0:	46c0      	nop			@ (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b006      	add	sp, #24
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	2210      	movs	r2, #16
 8002700:	4393      	bics	r3, r2
 8002702:	001a      	movs	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4a0d      	ldr	r2, [pc, #52]	@ (8002748 <TIM_TI2_ConfigInputStage+0x60>)
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	031b      	lsls	r3, r3, #12
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	22a0      	movs	r2, #160	@ 0xa0
 8002724:	4393      	bics	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	621a      	str	r2, [r3, #32]
}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	b006      	add	sp, #24
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	ffff0fff 	.word	0xffff0fff

0800274c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4a08      	ldr	r2, [pc, #32]	@ (8002780 <TIM_ITRx_SetConfig+0x34>)
 8002760:	4013      	ands	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	2207      	movs	r2, #7
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	609a      	str	r2, [r3, #8]
}
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b004      	add	sp, #16
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	ffcfff8f 	.word	0xffcfff8f

08002784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	4a09      	ldr	r2, [pc, #36]	@ (80027c0 <TIM_ETR_SetConfig+0x3c>)
 800279c:	4013      	ands	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	021a      	lsls	r2, r3, #8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	609a      	str	r2, [r3, #8]
}
 80027b8:	46c0      	nop			@ (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b006      	add	sp, #24
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	ffff00ff 	.word	0xffff00ff

080027c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	221f      	movs	r2, #31
 80027d4:	4013      	ands	r3, r2
 80027d6:	2201      	movs	r2, #1
 80027d8:	409a      	lsls	r2, r3
 80027da:	0013      	movs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	43d2      	mvns	r2, r2
 80027e6:	401a      	ands	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a1a      	ldr	r2, [r3, #32]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	211f      	movs	r1, #31
 80027f4:	400b      	ands	r3, r1
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4099      	lsls	r1, r3
 80027fa:	000b      	movs	r3, r1
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	621a      	str	r2, [r3, #32]
}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	46bd      	mov	sp, r7
 8002806:	b006      	add	sp, #24
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	223c      	movs	r2, #60	@ 0x3c
 800281a:	5c9b      	ldrb	r3, [r3, r2]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002820:	2302      	movs	r3, #2
 8002822:	e04a      	b.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	223c      	movs	r2, #60	@ 0x3c
 8002828:	2101      	movs	r1, #1
 800282a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	223d      	movs	r2, #61	@ 0x3d
 8002830:	2102      	movs	r1, #2
 8002832:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1e      	ldr	r2, [pc, #120]	@ (80028c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d108      	bne.n	8002860 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4a1d      	ldr	r2, [pc, #116]	@ (80028c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002852:	4013      	ands	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2270      	movs	r2, #112	@ 0x70
 8002864:	4393      	bics	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a11      	ldr	r2, [pc, #68]	@ (80028c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d004      	beq.n	800288e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a10      	ldr	r2, [pc, #64]	@ (80028cc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d10c      	bne.n	80028a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2280      	movs	r2, #128	@ 0x80
 8002892:	4393      	bics	r3, r2
 8002894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	4313      	orrs	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	223d      	movs	r2, #61	@ 0x3d
 80028ac:	2101      	movs	r1, #1
 80028ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	223c      	movs	r2, #60	@ 0x3c
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b004      	add	sp, #16
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	ff0fffff 	.word	0xff0fffff
 80028cc:	40000400 	.word	0x40000400

080028d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	223c      	movs	r2, #60	@ 0x3c
 80028e2:	5c9b      	ldrb	r3, [r3, r2]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e06f      	b.n	80029cc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	223c      	movs	r2, #60	@ 0x3c
 80028f0:	2101      	movs	r1, #1
 80028f2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	22ff      	movs	r2, #255	@ 0xff
 80028f8:	4393      	bics	r3, r2
 80028fa:	001a      	movs	r2, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4a33      	ldr	r2, [pc, #204]	@ (80029d4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002908:	401a      	ands	r2, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4a30      	ldr	r2, [pc, #192]	@ (80029d8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002916:	401a      	ands	r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4313      	orrs	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a2e      	ldr	r2, [pc, #184]	@ (80029dc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002924:	401a      	ands	r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4a2b      	ldr	r2, [pc, #172]	@ (80029e0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8002932:	401a      	ands	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a29      	ldr	r2, [pc, #164]	@ (80029e4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8002940:	401a      	ands	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4a26      	ldr	r2, [pc, #152]	@ (80029e8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800294e:	401a      	ands	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a24      	ldr	r2, [pc, #144]	@ (80029ec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800295c:	401a      	ands	r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	041b      	lsls	r3, r3, #16
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a21      	ldr	r2, [pc, #132]	@ (80029f0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800296c:	401a      	ands	r2, r3
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1e      	ldr	r2, [pc, #120]	@ (80029f4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d11c      	bne.n	80029ba <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4a1d      	ldr	r2, [pc, #116]	@ (80029f8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002984:	401a      	ands	r2, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298a:	051b      	lsls	r3, r3, #20
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a1a      	ldr	r2, [pc, #104]	@ (80029fc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002994:	401a      	ands	r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80029a2:	401a      	ands	r2, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a15      	ldr	r2, [pc, #84]	@ (8002a04 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80029b0:	401a      	ands	r2, r3
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	223c      	movs	r2, #60	@ 0x3c
 80029c6:	2100      	movs	r1, #0
 80029c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b004      	add	sp, #16
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	fffffcff 	.word	0xfffffcff
 80029d8:	fffffbff 	.word	0xfffffbff
 80029dc:	fffff7ff 	.word	0xfffff7ff
 80029e0:	ffffefff 	.word	0xffffefff
 80029e4:	ffffdfff 	.word	0xffffdfff
 80029e8:	ffffbfff 	.word	0xffffbfff
 80029ec:	fff0ffff 	.word	0xfff0ffff
 80029f0:	efffffff 	.word	0xefffffff
 80029f4:	40012c00 	.word	0x40012c00
 80029f8:	ff0fffff 	.word	0xff0fffff
 80029fc:	feffffff 	.word	0xfeffffff
 8002a00:	fdffffff 	.word	0xfdffffff
 8002a04:	dfffffff 	.word	0xdfffffff

08002a08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a10:	46c0      	nop			@ (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b002      	add	sp, #8
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a20:	46c0      	nop			@ (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a30:	46c0      	nop			@ (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <memset>:
 8002a38:	0003      	movs	r3, r0
 8002a3a:	1882      	adds	r2, r0, r2
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <memset+0xa>
 8002a40:	4770      	bx	lr
 8002a42:	7019      	strb	r1, [r3, #0]
 8002a44:	3301      	adds	r3, #1
 8002a46:	e7f9      	b.n	8002a3c <memset+0x4>

08002a48 <__libc_init_array>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	2600      	movs	r6, #0
 8002a4c:	4c0c      	ldr	r4, [pc, #48]	@ (8002a80 <__libc_init_array+0x38>)
 8002a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8002a84 <__libc_init_array+0x3c>)
 8002a50:	1b64      	subs	r4, r4, r5
 8002a52:	10a4      	asrs	r4, r4, #2
 8002a54:	42a6      	cmp	r6, r4
 8002a56:	d109      	bne.n	8002a6c <__libc_init_array+0x24>
 8002a58:	2600      	movs	r6, #0
 8002a5a:	f000 f819 	bl	8002a90 <_init>
 8002a5e:	4c0a      	ldr	r4, [pc, #40]	@ (8002a88 <__libc_init_array+0x40>)
 8002a60:	4d0a      	ldr	r5, [pc, #40]	@ (8002a8c <__libc_init_array+0x44>)
 8002a62:	1b64      	subs	r4, r4, r5
 8002a64:	10a4      	asrs	r4, r4, #2
 8002a66:	42a6      	cmp	r6, r4
 8002a68:	d105      	bne.n	8002a76 <__libc_init_array+0x2e>
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	00b3      	lsls	r3, r6, #2
 8002a6e:	58eb      	ldr	r3, [r5, r3]
 8002a70:	4798      	blx	r3
 8002a72:	3601      	adds	r6, #1
 8002a74:	e7ee      	b.n	8002a54 <__libc_init_array+0xc>
 8002a76:	00b3      	lsls	r3, r6, #2
 8002a78:	58eb      	ldr	r3, [r5, r3]
 8002a7a:	4798      	blx	r3
 8002a7c:	3601      	adds	r6, #1
 8002a7e:	e7f2      	b.n	8002a66 <__libc_init_array+0x1e>
 8002a80:	08002b3c 	.word	0x08002b3c
 8002a84:	08002b3c 	.word	0x08002b3c
 8002a88:	08002b40 	.word	0x08002b40
 8002a8c:	08002b3c 	.word	0x08002b3c

08002a90 <_init>:
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a96:	bc08      	pop	{r3}
 8002a98:	469e      	mov	lr, r3
 8002a9a:	4770      	bx	lr

08002a9c <_fini>:
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	46c0      	nop			@ (mov r8, r8)
 8002aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa2:	bc08      	pop	{r3}
 8002aa4:	469e      	mov	lr, r3
 8002aa6:	4770      	bx	lr
